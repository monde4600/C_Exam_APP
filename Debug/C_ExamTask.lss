
C_ExamTask.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000404a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ae  00800060  0000404a  000040de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080020e  0080020e  0000428c  2**0
                  ALLOC
  3 .stab         00003da4  00000000  00000000  0000428c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ac  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000096dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000be79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <main>
      8a:	0c 94 23 20 	jmp	0x4046	; 0x4046 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e0       	ldi	r26, 0x01	; 1
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 20 	jmp	0x4020	; 0x4020 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 18 20 	jmp	0x4030	; 0x4030 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 10 20 	jmp	0x4020	; 0x4020 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 5f       	subi	r30, 0xF7	; 247
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_Timer_Void_TimerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
     e52:	a9 e5       	ldi	r26, 0x59	; 89
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e9 e5       	ldi	r30, 0x59	; 89
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <M_Timer_Void_TimerSetTime>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	2c 97       	sbiw	r28, 0x0c	; 12
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	69 87       	std	Y+9, r22	; 0x09
     e7c:	7a 87       	std	Y+10, r23	; 0x0a
     e7e:	8b 87       	std	Y+11, r24	; 0x0b
     e80:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	9e 83       	std	Y+6, r25	; 0x06
     e8e:	af 83       	std	Y+7, r26	; 0x07
     e90:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	ab 85       	ldd	r26, Y+11	; 0x0b
     e98:	bc 85       	ldd	r27, Y+12	; 0x0c
     e9a:	28 ee       	ldi	r18, 0xE8	; 232
     e9c:	33 e0       	ldi	r19, 0x03	; 3
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__mulsi3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	2d 81       	ldd	r18, Y+5	; 0x05
     eb0:	3e 81       	ldd	r19, Y+6	; 0x06
     eb2:	4f 81       	ldd	r20, Y+7	; 0x07
     eb4:	58 85       	ldd	r21, Y+8	; 0x08
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodsi4>
     ebe:	da 01       	movw	r26, r20
     ec0:	c9 01       	movw	r24, r18
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	89 2f       	mov	r24, r25
     ed4:	9a 2f       	mov	r25, r26
     ed6:	ab 2f       	mov	r26, r27
     ed8:	bb 27       	eor	r27, r27
     eda:	80 93 0e 02 	sts	0x020E, r24
     ede:	90 93 0f 02 	sts	0x020F, r25
     ee2:	a0 93 10 02 	sts	0x0210, r26
     ee6:	b0 93 11 02 	sts	0x0211, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	80 93 16 02 	sts	0x0216, r24
	if(Timer_U8_RemTicks != 0)
     ef0:	80 91 16 02 	lds	r24, 0x0216
     ef4:	88 23       	and	r24, r24
     ef6:	c9 f0       	breq	.+50     	; 0xf2a <M_Timer_Void_TimerSetTime+0xc4>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
     ef8:	e2 e5       	ldi	r30, 0x52	; 82
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 91 16 02 	lds	r24, 0x0216
     f00:	81 95       	neg	r24
     f02:	80 83       	st	Z, r24
		Timer_U32_NumOfOV++;
     f04:	80 91 0e 02 	lds	r24, 0x020E
     f08:	90 91 0f 02 	lds	r25, 0x020F
     f0c:	a0 91 10 02 	lds	r26, 0x0210
     f10:	b0 91 11 02 	lds	r27, 0x0211
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	a1 1d       	adc	r26, r1
     f18:	b1 1d       	adc	r27, r1
     f1a:	80 93 0e 02 	sts	0x020E, r24
     f1e:	90 93 0f 02 	sts	0x020F, r25
     f22:	a0 93 10 02 	sts	0x0210, r26
     f26:	b0 93 11 02 	sts	0x0211, r27
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
     f2a:	2c 96       	adiw	r28, 0x0c	; 12
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <M_Timer_Void_TimerStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <M_Timer_Void_TimerStart+0x6>
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3b 83       	std	Y+3, r19	; 0x03
     f52:	2a 83       	std	Y+2, r18	; 0x02
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	31 f0       	breq	.+12     	; 0xf68 <M_Timer_Void_TimerStart+0x2c>
     f5c:	2a 81       	ldd	r18, Y+2	; 0x02
     f5e:	3b 81       	ldd	r19, Y+3	; 0x03
     f60:	21 30       	cpi	r18, 0x01	; 1
     f62:	31 05       	cpc	r19, r1
     f64:	b9 f0       	breq	.+46     	; 0xf94 <M_Timer_Void_TimerStart+0x58>
     f66:	2b c0       	rjmp	.+86     	; 0xfbe <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
     f68:	a3 e5       	ldi	r26, 0x53	; 83
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e3 e5       	ldi	r30, 0x53	; 83
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
     f76:	a3 e5       	ldi	r26, 0x53	; 83
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e3 e5       	ldi	r30, 0x53	; 83
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8d 7f       	andi	r24, 0xFD	; 253
     f82:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	8c 93       	st	X, r24
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <M_Timer_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
     f94:	ae e4       	ldi	r26, 0x4E	; 78
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ee e4       	ldi	r30, 0x4E	; 78
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     fa2:	ae e4       	ldi	r26, 0x4E	; 78
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ee e4       	ldi	r30, 0x4E	; 78
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8d 7f       	andi	r24, 0xFD	; 253
     fae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
     fb0:	ae e4       	ldi	r26, 0x4E	; 78
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	84 60       	ori	r24, 0x04	; 4
     fbc:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <M_Timer_Void_TimerStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <M_Timer_Void_TimerStop+0x6>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3b 83       	std	Y+3, r19	; 0x03
     fe0:	2a 83       	std	Y+2, r18	; 0x02
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	31 f0       	breq	.+12     	; 0xff6 <M_Timer_Void_TimerStop+0x2c>
     fea:	2a 81       	ldd	r18, Y+2	; 0x02
     fec:	3b 81       	ldd	r19, Y+3	; 0x03
     fee:	21 30       	cpi	r18, 0x01	; 1
     ff0:	31 05       	cpc	r19, r1
     ff2:	b9 f0       	breq	.+46     	; 0x1022 <M_Timer_Void_TimerStop+0x58>
     ff4:	2b c0       	rjmp	.+86     	; 0x104c <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
     ff6:	a3 e5       	ldi	r26, 0x53	; 83
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e3 e5       	ldi	r30, 0x53	; 83
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8e 7f       	andi	r24, 0xFE	; 254
    1002:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    1004:	a3 e5       	ldi	r26, 0x53	; 83
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e3 e5       	ldi	r30, 0x53	; 83
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8d 7f       	andi	r24, 0xFD	; 253
    1010:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e3 e5       	ldi	r30, 0x53	; 83
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8b 7f       	andi	r24, 0xFB	; 251
    101e:	8c 93       	st	X, r24
    1020:	15 c0       	rjmp	.+42     	; 0x104c <M_Timer_Void_TimerStop+0x82>

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    1022:	ae e4       	ldi	r26, 0x4E	; 78
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ee e4       	ldi	r30, 0x4E	; 78
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8d 7f       	andi	r24, 0xFD	; 253
    103c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8b 7f       	andi	r24, 0xFB	; 251
    104a:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <M_Timer_Void_PWMInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <M_Timer_Void_PWMInit+0x6>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3b 83       	std	Y+3, r19	; 0x03
    106e:	2a 83       	std	Y+2, r18	; 0x02
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	31 f0       	breq	.+12     	; 0x1084 <M_Timer_Void_PWMInit+0x2c>
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	21 30       	cpi	r18, 0x01	; 1
    107e:	31 05       	cpc	r19, r1
    1080:	a1 f0       	breq	.+40     	; 0x10aa <M_Timer_Void_PWMInit+0x52>
    1082:	47 c0       	rjmp	.+142    	; 0x1112 <M_Timer_Void_PWMInit+0xba>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    1084:	87 e1       	ldi	r24, 0x17	; 23
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7e       	andi	r24, 0xEF	; 239
    1098:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	8c 93       	st	X, r24
    10a8:	34 c0       	rjmp	.+104    	; 0x1112 <M_Timer_Void_PWMInit+0xba>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    10aa:	8d e2       	ldi	r24, 0x2D	; 45
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    10b2:	af e4       	ldi	r26, 0x4F	; 79
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ef e4       	ldi	r30, 0x4F	; 79
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    10c0:	af e4       	ldi	r26, 0x4F	; 79
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ef e4       	ldi	r30, 0x4F	; 79
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	82 60       	ori	r24, 0x02	; 2
    10cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    10ce:	ae e4       	ldi	r26, 0x4E	; 78
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    10dc:	ae e4       	ldi	r26, 0x4E	; 78
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ee e4       	ldi	r30, 0x4E	; 78
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    10ea:	af e4       	ldi	r26, 0x4F	; 79
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    1106:	e6 e4       	ldi	r30, 0x46	; 70
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	27 97       	sbiw	r28, 0x07	; 7
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	4a 83       	std	Y+2, r20	; 0x02
    113a:	5b 83       	std	Y+3, r21	; 0x03
    113c:	6c 83       	std	Y+4, r22	; 0x04
    113e:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3f 83       	std	Y+7, r19	; 0x07
    1148:	2e 83       	std	Y+6, r18	; 0x06
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	d9 f1       	breq	.+118    	; 0x11c8 <M_Timer_Void_PWMSetDutyCycle+0xaa>
    1152:	ee 81       	ldd	r30, Y+6	; 0x06
    1154:	ff 81       	ldd	r31, Y+7	; 0x07
    1156:	e1 30       	cpi	r30, 0x01	; 1
    1158:	f1 05       	cpc	r31, r1
    115a:	b1 f5       	brne	.+108    	; 0x11c8 <M_Timer_Void_PWMSetDutyCycle+0xaa>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    115c:	0a e4       	ldi	r16, 0x4A	; 74
    115e:	10 e0       	ldi	r17, 0x00	; 0
    1160:	e6 e4       	ldi	r30, 0x46	; 70
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	cc 01       	movw	r24, r24
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	2a 81       	ldd	r18, Y+2	; 0x02
    1180:	3b 81       	ldd	r19, Y+3	; 0x03
    1182:	4c 81       	ldd	r20, Y+4	; 0x04
    1184:	5d 81       	ldd	r21, Y+5	; 0x05
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	48 ec       	ldi	r20, 0xC8	; 200
    1198:	52 e4       	ldi	r21, 0x42	; 66
    119a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	f8 01       	movw	r30, r16
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    11c8:	27 96       	adiw	r28, 0x07	; 7
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <M_Timer_Void_PWMStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <M_Timer_Void_TimerStart>
}
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <M_Timer_Void_PWMStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	0e 94 e5 07 	call	0xfca	; 0xfca <M_Timer_Void_TimerStop>
}
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <M_Timer_Void_SetCallBack>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <M_Timer_Void_SetCallBack+0x6>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	90 93 1e 02 	sts	0x021E, r25
    1228:	80 93 1d 02 	sts	0x021D, r24
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1260:	80 91 17 02 	lds	r24, 0x0217
    1264:	90 91 18 02 	lds	r25, 0x0218
    1268:	a0 91 19 02 	lds	r26, 0x0219
    126c:	b0 91 1a 02 	lds	r27, 0x021A
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	a1 1d       	adc	r26, r1
    1274:	b1 1d       	adc	r27, r1
    1276:	80 93 17 02 	sts	0x0217, r24
    127a:	90 93 18 02 	sts	0x0218, r25
    127e:	a0 93 19 02 	sts	0x0219, r26
    1282:	b0 93 1a 02 	sts	0x021A, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    1286:	20 91 17 02 	lds	r18, 0x0217
    128a:	30 91 18 02 	lds	r19, 0x0218
    128e:	40 91 19 02 	lds	r20, 0x0219
    1292:	50 91 1a 02 	lds	r21, 0x021A
    1296:	80 91 0e 02 	lds	r24, 0x020E
    129a:	90 91 0f 02 	lds	r25, 0x020F
    129e:	a0 91 10 02 	lds	r26, 0x0210
    12a2:	b0 91 11 02 	lds	r27, 0x0211
    12a6:	28 17       	cp	r18, r24
    12a8:	39 07       	cpc	r19, r25
    12aa:	4a 07       	cpc	r20, r26
    12ac:	5b 07       	cpc	r21, r27
    12ae:	99 f4       	brne	.+38     	; 0x12d6 <__vector_11+0xa0>
	{
		Timer_CallBack();
    12b0:	e0 91 1d 02 	lds	r30, 0x021D
    12b4:	f0 91 1e 02 	lds	r31, 0x021E
    12b8:	09 95       	icall
		Local_U32_Counter = 0;
    12ba:	10 92 17 02 	sts	0x0217, r1
    12be:	10 92 18 02 	sts	0x0218, r1
    12c2:	10 92 19 02 	sts	0x0219, r1
    12c6:	10 92 1a 02 	sts	0x021A, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    12ca:	e2 e5       	ldi	r30, 0x52	; 82
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 91 16 02 	lds	r24, 0x0216
    12d2:	81 95       	neg	r24
    12d4:	80 83       	st	Z, r24
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <M_GIE_Void_GlobalInterruptEnable>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptEnable(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
    1304:	af e5       	ldi	r26, 0x5F	; 95
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e5       	ldi	r30, 0x5F	; 95
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	8c 93       	st	X, r24
	//SREG_REG |=0X80;
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <M_GIE_Void_GlobalInterruptDisable>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptDisable(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
    1320:	af e5       	ldi	r26, 0x5F	; 95
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ef e5       	ldi	r30, 0x5F	; 95
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 77       	andi	r24, 0x7F	; 127
    132c:	8c 93       	st	X, r24
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2a 97       	sbiw	r28, 0x0a	; 10
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9a e0       	ldi	r25, 0x0A	; 10
    1350:	69 2f       	mov	r22, r25
    1352:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    1356:	89 2f       	mov	r24, r25
    1358:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9a e0       	ldi	r25, 0x0A	; 10
    135e:	69 2f       	mov	r22, r25
    1360:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    1364:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3a 87       	std	Y+10, r19	; 0x0a
    136e:	29 87       	std	Y+9, r18	; 0x09
    1370:	89 85       	ldd	r24, Y+9	; 0x09
    1372:	9a 85       	ldd	r25, Y+10	; 0x0a
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	39 f0       	breq	.+14     	; 0x1386 <M_DIO_Void_SetPinDirection+0x52>
    1378:	29 85       	ldd	r18, Y+9	; 0x09
    137a:	3a 85       	ldd	r19, Y+10	; 0x0a
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	31 05       	cpc	r19, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <M_DIO_Void_SetPinDirection+0x50>
    1382:	76 c0       	rjmp	.+236    	; 0x1470 <M_DIO_Void_SetPinDirection+0x13c>
    1384:	e4 c0       	rjmp	.+456    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	38 87       	std	Y+8, r19	; 0x08
    138e:	2f 83       	std	Y+7, r18	; 0x07
    1390:	8f 81       	ldd	r24, Y+7	; 0x07
    1392:	98 85       	ldd	r25, Y+8	; 0x08
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	61 f1       	breq	.+88     	; 0x13f2 <M_DIO_Void_SetPinDirection+0xbe>
    139a:	2f 81       	ldd	r18, Y+7	; 0x07
    139c:	38 85       	ldd	r19, Y+8	; 0x08
    139e:	23 30       	cpi	r18, 0x03	; 3
    13a0:	31 05       	cpc	r19, r1
    13a2:	34 f4       	brge	.+12     	; 0x13b0 <M_DIO_Void_SetPinDirection+0x7c>
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	69 f0       	breq	.+26     	; 0x13c8 <M_DIO_Void_SetPinDirection+0x94>
    13ae:	cf c0       	rjmp	.+414    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
    13b0:	2f 81       	ldd	r18, Y+7	; 0x07
    13b2:	38 85       	ldd	r19, Y+8	; 0x08
    13b4:	23 30       	cpi	r18, 0x03	; 3
    13b6:	31 05       	cpc	r19, r1
    13b8:	89 f1       	breq	.+98     	; 0x141c <M_DIO_Void_SetPinDirection+0xe8>
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <M_DIO_Void_SetPinDirection+0x92>
    13c4:	40 c0       	rjmp	.+128    	; 0x1446 <M_DIO_Void_SetPinDirection+0x112>
    13c6:	c3 c0       	rjmp	.+390    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <M_DIO_Void_SetPinDirection+0xb2>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <M_DIO_Void_SetPinDirection+0xae>
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	ae c0       	rjmp	.+348    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <M_DIO_Void_SetPinDirection+0xdc>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <M_DIO_Void_SetPinDirection+0xd8>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	99 c0       	rjmp	.+306    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    141c:	a4 e3       	ldi	r26, 0x34	; 52
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e3       	ldi	r30, 0x34	; 52
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <M_DIO_Void_SetPinDirection+0x106>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <M_DIO_Void_SetPinDirection+0x102>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	84 c0       	rjmp	.+264    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    1446:	a1 e3       	ldi	r26, 0x31	; 49
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <M_DIO_Void_SetPinDirection+0x130>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <M_DIO_Void_SetPinDirection+0x12c>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	6f c0       	rjmp	.+222    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3e 83       	std	Y+6, r19	; 0x06
    1478:	2d 83       	std	Y+5, r18	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	91 05       	cpc	r25, r1
    1482:	51 f1       	breq	.+84     	; 0x14d8 <M_DIO_Void_SetPinDirection+0x1a4>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	23 30       	cpi	r18, 0x03	; 3
    148a:	31 05       	cpc	r19, r1
    148c:	34 f4       	brge	.+12     	; 0x149a <M_DIO_Void_SetPinDirection+0x166>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <M_DIO_Void_SetPinDirection+0x17c>
    1498:	5a c0       	rjmp	.+180    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
    149a:	2d 81       	ldd	r18, Y+5	; 0x05
    149c:	3e 81       	ldd	r19, Y+6	; 0x06
    149e:	23 30       	cpi	r18, 0x03	; 3
    14a0:	31 05       	cpc	r19, r1
    14a2:	71 f1       	breq	.+92     	; 0x1500 <M_DIO_Void_SetPinDirection+0x1cc>
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	91 05       	cpc	r25, r1
    14ac:	e9 f1       	breq	.+122    	; 0x1528 <M_DIO_Void_SetPinDirection+0x1f4>
    14ae:	4f c0       	rjmp	.+158    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    14b0:	aa e3       	ldi	r26, 0x3A	; 58
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ea e3       	ldi	r30, 0x3A	; 58
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <M_DIO_Void_SetPinDirection+0x19a>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <M_DIO_Void_SetPinDirection+0x196>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	3b c0       	rjmp	.+118    	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    14d8:	a7 e3       	ldi	r26, 0x37	; 55
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e3       	ldi	r30, 0x37	; 55
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <M_DIO_Void_SetPinDirection+0x1c2>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <M_DIO_Void_SetPinDirection+0x1be>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	27 c0       	rjmp	.+78     	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1500:	a4 e3       	ldi	r26, 0x34	; 52
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e4 e3       	ldi	r30, 0x34	; 52
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <M_DIO_Void_SetPinDirection+0x1ea>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <M_DIO_Void_SetPinDirection+0x1e6>
    1522:	84 2b       	or	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	13 c0       	rjmp	.+38     	; 0x154e <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    1528:	a1 e3       	ldi	r26, 0x31	; 49
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e1 e3       	ldi	r30, 0x31	; 49
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <M_DIO_Void_SetPinDirection+0x212>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <M_DIO_Void_SetPinDirection+0x20e>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    154e:	2a 96       	adiw	r28, 0x0a	; 10
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	2a 97       	sbiw	r28, 0x0a	; 10
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9a e0       	ldi	r25, 0x0A	; 10
    157c:	69 2f       	mov	r22, r25
    157e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    1582:	89 2f       	mov	r24, r25
    1584:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9a e0       	ldi	r25, 0x0A	; 10
    158a:	69 2f       	mov	r22, r25
    158c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    1590:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3a 87       	std	Y+10, r19	; 0x0a
    159a:	29 87       	std	Y+9, r18	; 0x09
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <M_DIO_Void_SetPinValue+0x52>
    15a4:	29 85       	ldd	r18, Y+9	; 0x09
    15a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15a8:	21 30       	cpi	r18, 0x01	; 1
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <M_DIO_Void_SetPinValue+0x50>
    15ae:	76 c0       	rjmp	.+236    	; 0x169c <M_DIO_Void_SetPinValue+0x13c>
    15b0:	e4 c0       	rjmp	.+456    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	38 87       	std	Y+8, r19	; 0x08
    15ba:	2f 83       	std	Y+7, r18	; 0x07
    15bc:	8f 81       	ldd	r24, Y+7	; 0x07
    15be:	98 85       	ldd	r25, Y+8	; 0x08
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	61 f1       	breq	.+88     	; 0x161e <M_DIO_Void_SetPinValue+0xbe>
    15c6:	2f 81       	ldd	r18, Y+7	; 0x07
    15c8:	38 85       	ldd	r19, Y+8	; 0x08
    15ca:	23 30       	cpi	r18, 0x03	; 3
    15cc:	31 05       	cpc	r19, r1
    15ce:	34 f4       	brge	.+12     	; 0x15dc <M_DIO_Void_SetPinValue+0x7c>
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	69 f0       	breq	.+26     	; 0x15f4 <M_DIO_Void_SetPinValue+0x94>
    15da:	cf c0       	rjmp	.+414    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
    15dc:	2f 81       	ldd	r18, Y+7	; 0x07
    15de:	38 85       	ldd	r19, Y+8	; 0x08
    15e0:	23 30       	cpi	r18, 0x03	; 3
    15e2:	31 05       	cpc	r19, r1
    15e4:	89 f1       	breq	.+98     	; 0x1648 <M_DIO_Void_SetPinValue+0xe8>
    15e6:	8f 81       	ldd	r24, Y+7	; 0x07
    15e8:	98 85       	ldd	r25, Y+8	; 0x08
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <M_DIO_Void_SetPinValue+0x92>
    15f0:	40 c0       	rjmp	.+128    	; 0x1672 <M_DIO_Void_SetPinValue+0x112>
    15f2:	c3 c0       	rjmp	.+390    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    15f4:	ab e3       	ldi	r26, 0x3B	; 59
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	eb e3       	ldi	r30, 0x3B	; 59
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <M_DIO_Void_SetPinValue+0xb2>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <M_DIO_Void_SetPinValue+0xae>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	ae c0       	rjmp	.+348    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    161e:	a8 e3       	ldi	r26, 0x38	; 56
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <M_DIO_Void_SetPinValue+0xdc>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <M_DIO_Void_SetPinValue+0xd8>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	99 c0       	rjmp	.+306    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1648:	a5 e3       	ldi	r26, 0x35	; 53
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <M_DIO_Void_SetPinValue+0x106>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <M_DIO_Void_SetPinValue+0x102>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	84 c0       	rjmp	.+264    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1672:	a2 e3       	ldi	r26, 0x32	; 50
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e2 e3       	ldi	r30, 0x32	; 50
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <M_DIO_Void_SetPinValue+0x130>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <M_DIO_Void_SetPinValue+0x12c>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	6f c0       	rjmp	.+222    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3e 83       	std	Y+6, r19	; 0x06
    16a4:	2d 83       	std	Y+5, r18	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	51 f1       	breq	.+84     	; 0x1704 <M_DIO_Void_SetPinValue+0x1a4>
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	31 05       	cpc	r19, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <M_DIO_Void_SetPinValue+0x166>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	61 f0       	breq	.+24     	; 0x16dc <M_DIO_Void_SetPinValue+0x17c>
    16c4:	5a c0       	rjmp	.+180    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
    16c6:	2d 81       	ldd	r18, Y+5	; 0x05
    16c8:	3e 81       	ldd	r19, Y+6	; 0x06
    16ca:	23 30       	cpi	r18, 0x03	; 3
    16cc:	31 05       	cpc	r19, r1
    16ce:	71 f1       	breq	.+92     	; 0x172c <M_DIO_Void_SetPinValue+0x1cc>
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	91 05       	cpc	r25, r1
    16d8:	e9 f1       	breq	.+122    	; 0x1754 <M_DIO_Void_SetPinValue+0x1f4>
    16da:	4f c0       	rjmp	.+158    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    16dc:	ab e3       	ldi	r26, 0x3B	; 59
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	eb e3       	ldi	r30, 0x3B	; 59
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <M_DIO_Void_SetPinValue+0x19a>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <M_DIO_Void_SetPinValue+0x196>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	3b c0       	rjmp	.+118    	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1704:	a8 e3       	ldi	r26, 0x38	; 56
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e3       	ldi	r30, 0x38	; 56
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <M_DIO_Void_SetPinValue+0x1c2>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <M_DIO_Void_SetPinValue+0x1be>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	27 c0       	rjmp	.+78     	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <M_DIO_Void_SetPinValue+0x1ea>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <M_DIO_Void_SetPinValue+0x1e6>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	13 c0       	rjmp	.+38     	; 0x177a <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1754:	a2 e3       	ldi	r26, 0x32	; 50
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <M_DIO_Void_SetPinValue+0x212>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <M_DIO_Void_SetPinValue+0x20e>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    177a:	2a 96       	adiw	r28, 0x0a	; 10
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <M_DIO_Void_GetPinValue+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <M_DIO_Void_GetPinValue+0x8>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <M_DIO_Void_GetPinValue+0xa>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9a e0       	ldi	r25, 0x0A	; 10
    17a0:	69 2f       	mov	r22, r25
    17a2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    17a6:	89 2f       	mov	r24, r25
    17a8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9a e0       	ldi	r25, 0x0A	; 10
    17ae:	69 2f       	mov	r22, r25
    17b0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    17b6:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	3e 83       	std	Y+6, r19	; 0x06
    17c0:	2d 83       	std	Y+5, r18	; 0x05
    17c2:	4d 81       	ldd	r20, Y+5	; 0x05
    17c4:	5e 81       	ldd	r21, Y+6	; 0x06
    17c6:	42 30       	cpi	r20, 0x02	; 2
    17c8:	51 05       	cpc	r21, r1
    17ca:	41 f1       	breq	.+80     	; 0x181c <M_DIO_Void_GetPinValue+0x90>
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	34 f4       	brge	.+12     	; 0x17e2 <M_DIO_Void_GetPinValue+0x56>
    17d6:	2d 81       	ldd	r18, Y+5	; 0x05
    17d8:	3e 81       	ldd	r19, Y+6	; 0x06
    17da:	21 30       	cpi	r18, 0x01	; 1
    17dc:	31 05       	cpc	r19, r1
    17de:	61 f0       	breq	.+24     	; 0x17f8 <M_DIO_Void_GetPinValue+0x6c>
    17e0:	52 c0       	rjmp	.+164    	; 0x1886 <M_DIO_Void_GetPinValue+0xfa>
    17e2:	4d 81       	ldd	r20, Y+5	; 0x05
    17e4:	5e 81       	ldd	r21, Y+6	; 0x06
    17e6:	43 30       	cpi	r20, 0x03	; 3
    17e8:	51 05       	cpc	r21, r1
    17ea:	51 f1       	breq	.+84     	; 0x1840 <M_DIO_Void_GetPinValue+0xb4>
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	91 05       	cpc	r25, r1
    17f4:	b9 f1       	breq	.+110    	; 0x1864 <M_DIO_Void_GetPinValue+0xd8>
    17f6:	47 c0       	rjmp	.+142    	; 0x1886 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    17f8:	e9 e3       	ldi	r30, 0x39	; 57
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <M_DIO_Void_GetPinValue+0x84>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <M_DIO_Void_GetPinValue+0x80>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	35 c0       	rjmp	.+106    	; 0x1886 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    181c:	e6 e3       	ldi	r30, 0x36	; 54
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a9 01       	movw	r20, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <M_DIO_Void_GetPinValue+0xa8>
    1830:	55 95       	asr	r21
    1832:	47 95       	ror	r20
    1834:	8a 95       	dec	r24
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <M_DIO_Void_GetPinValue+0xa4>
    1838:	ca 01       	movw	r24, r20
    183a:	81 70       	andi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	23 c0       	rjmp	.+70     	; 0x1886 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1840:	e3 e3       	ldi	r30, 0x33	; 51
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <M_DIO_Void_GetPinValue+0xcc>
    1854:	55 95       	asr	r21
    1856:	47 95       	ror	r20
    1858:	8a 95       	dec	r24
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <M_DIO_Void_GetPinValue+0xc8>
    185c:	ca 01       	movw	r24, r20
    185e:	81 70       	andi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	11 c0       	rjmp	.+34     	; 0x1886 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1864:	e0 e3       	ldi	r30, 0x30	; 48
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <M_DIO_Void_GetPinValue+0xf0>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <M_DIO_Void_GetPinValue+0xec>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
}
    1888:	26 96       	adiw	r28, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <M_DIO_Void_TogPin+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <M_DIO_Void_TogPin+0x8>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9a e0       	ldi	r25, 0x0A	; 10
    18ae:	69 2f       	mov	r22, r25
    18b0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    18b4:	89 2f       	mov	r24, r25
    18b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9a e0       	ldi	r25, 0x0A	; 10
    18bc:	69 2f       	mov	r22, r25
    18be:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    18c2:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3d 83       	std	Y+5, r19	; 0x05
    18cc:	2c 83       	std	Y+4, r18	; 0x04
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	91 05       	cpc	r25, r1
    18d6:	51 f1       	breq	.+84     	; 0x192c <M_DIO_Void_TogPin+0x92>
    18d8:	2c 81       	ldd	r18, Y+4	; 0x04
    18da:	3d 81       	ldd	r19, Y+5	; 0x05
    18dc:	23 30       	cpi	r18, 0x03	; 3
    18de:	31 05       	cpc	r19, r1
    18e0:	34 f4       	brge	.+12     	; 0x18ee <M_DIO_Void_TogPin+0x54>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	61 f0       	breq	.+24     	; 0x1904 <M_DIO_Void_TogPin+0x6a>
    18ec:	5a c0       	rjmp	.+180    	; 0x19a2 <M_DIO_Void_TogPin+0x108>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	71 f1       	breq	.+92     	; 0x1954 <M_DIO_Void_TogPin+0xba>
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	91 05       	cpc	r25, r1
    1900:	e9 f1       	breq	.+122    	; 0x197c <M_DIO_Void_TogPin+0xe2>
    1902:	4f c0       	rjmp	.+158    	; 0x19a2 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1904:	ab e3       	ldi	r26, 0x3B	; 59
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	eb e3       	ldi	r30, 0x3B	; 59
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <M_DIO_Void_TogPin+0x88>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <M_DIO_Void_TogPin+0x84>
    1926:	84 27       	eor	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	3b c0       	rjmp	.+118    	; 0x19a2 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    192c:	a8 e3       	ldi	r26, 0x38	; 56
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e3       	ldi	r30, 0x38	; 56
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <M_DIO_Void_TogPin+0xb0>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <M_DIO_Void_TogPin+0xac>
    194e:	84 27       	eor	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	27 c0       	rjmp	.+78     	; 0x19a2 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1954:	a5 e3       	ldi	r26, 0x35	; 53
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e5 e3       	ldi	r30, 0x35	; 53
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <M_DIO_Void_TogPin+0xd8>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <M_DIO_Void_TogPin+0xd4>
    1976:	84 27       	eor	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <M_DIO_Void_TogPin+0x100>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <M_DIO_Void_TogPin+0xfc>
    199e:	84 27       	eor	r24, r20
    19a0:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	2a 97       	sbiw	r28, 0x0a	; 10
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9a e0       	ldi	r25, 0x0A	; 10
    19ce:	69 2f       	mov	r22, r25
    19d0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    19d4:	89 2f       	mov	r24, r25
    19d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9a e0       	ldi	r25, 0x0A	; 10
    19dc:	69 2f       	mov	r22, r25
    19de:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    19e2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3a 87       	std	Y+10, r19	; 0x0a
    19ec:	29 87       	std	Y+9, r18	; 0x09
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	39 f0       	breq	.+14     	; 0x1a04 <M_DIO_Void_SetPinPullUpRes+0x52>
    19f6:	29 85       	ldd	r18, Y+9	; 0x09
    19f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19fa:	21 30       	cpi	r18, 0x01	; 1
    19fc:	31 05       	cpc	r19, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <M_DIO_Void_SetPinPullUpRes+0x50>
    1a00:	76 c0       	rjmp	.+236    	; 0x1aee <M_DIO_Void_SetPinPullUpRes+0x13c>
    1a02:	e4 c0       	rjmp	.+456    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	38 87       	std	Y+8, r19	; 0x08
    1a0c:	2f 83       	std	Y+7, r18	; 0x07
    1a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a10:	98 85       	ldd	r25, Y+8	; 0x08
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	91 05       	cpc	r25, r1
    1a16:	61 f1       	breq	.+88     	; 0x1a70 <M_DIO_Void_SetPinPullUpRes+0xbe>
    1a18:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1a:	38 85       	ldd	r19, Y+8	; 0x08
    1a1c:	23 30       	cpi	r18, 0x03	; 3
    1a1e:	31 05       	cpc	r19, r1
    1a20:	34 f4       	brge	.+12     	; 0x1a2e <M_DIO_Void_SetPinPullUpRes+0x7c>
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	98 85       	ldd	r25, Y+8	; 0x08
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	69 f0       	breq	.+26     	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x94>
    1a2c:	cf c0       	rjmp	.+414    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
    1a2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a30:	38 85       	ldd	r19, Y+8	; 0x08
    1a32:	23 30       	cpi	r18, 0x03	; 3
    1a34:	31 05       	cpc	r19, r1
    1a36:	89 f1       	breq	.+98     	; 0x1a9a <M_DIO_Void_SetPinPullUpRes+0xe8>
    1a38:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3a:	98 85       	ldd	r25, Y+8	; 0x08
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	91 05       	cpc	r25, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <M_DIO_Void_SetPinPullUpRes+0x92>
    1a42:	40 c0       	rjmp	.+128    	; 0x1ac4 <M_DIO_Void_SetPinPullUpRes+0x112>
    1a44:	c3 c0       	rjmp	.+390    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1a46:	ab e3       	ldi	r26, 0x3B	; 59
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <M_DIO_Void_SetPinPullUpRes+0xae>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	ae c0       	rjmp	.+348    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1a70:	a8 e3       	ldi	r26, 0x38	; 56
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e8 e3       	ldi	r30, 0x38	; 56
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <M_DIO_Void_SetPinPullUpRes+0xdc>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <M_DIO_Void_SetPinPullUpRes+0xd8>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	99 c0       	rjmp	.+306    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1a9a:	a5 e3       	ldi	r26, 0x35	; 53
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e3       	ldi	r30, 0x35	; 53
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <M_DIO_Void_SetPinPullUpRes+0x106>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <M_DIO_Void_SetPinPullUpRes+0x102>
    1abc:	80 95       	com	r24
    1abe:	84 23       	and	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	84 c0       	rjmp	.+264    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1ac4:	a2 e3       	ldi	r26, 0x32	; 50
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e2 e3       	ldi	r30, 0x32	; 50
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <M_DIO_Void_SetPinPullUpRes+0x130>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <M_DIO_Void_SetPinPullUpRes+0x12c>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	6f c0       	rjmp	.+222    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3e 83       	std	Y+6, r19	; 0x06
    1af6:	2d 83       	std	Y+5, r18	; 0x05
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	91 05       	cpc	r25, r1
    1b00:	51 f1       	breq	.+84     	; 0x1b56 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1b02:	2d 81       	ldd	r18, Y+5	; 0x05
    1b04:	3e 81       	ldd	r19, Y+6	; 0x06
    1b06:	23 30       	cpi	r18, 0x03	; 3
    1b08:	31 05       	cpc	r19, r1
    1b0a:	34 f4       	brge	.+12     	; 0x1b18 <M_DIO_Void_SetPinPullUpRes+0x166>
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <M_DIO_Void_SetPinPullUpRes+0x17c>
    1b16:	5a c0       	rjmp	.+180    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
    1b18:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1c:	23 30       	cpi	r18, 0x03	; 3
    1b1e:	31 05       	cpc	r19, r1
    1b20:	71 f1       	breq	.+92     	; 0x1b7e <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	91 05       	cpc	r25, r1
    1b2a:	e9 f1       	breq	.+122    	; 0x1ba6 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1b2c:	4f c0       	rjmp	.+158    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1b2e:	ab e3       	ldi	r26, 0x3B	; 59
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <M_DIO_Void_SetPinPullUpRes+0x19a>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <M_DIO_Void_SetPinPullUpRes+0x196>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	3b c0       	rjmp	.+118    	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1b56:	a8 e3       	ldi	r26, 0x38	; 56
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <M_DIO_Void_SetPinPullUpRes+0x1be>
    1b78:	84 2b       	or	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1ba6:	a2 e3       	ldi	r26, 0x32	; 50
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <M_DIO_Void_SetPinPullUpRes+0x212>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <M_DIO_Void_SetPinPullUpRes+0x20e>
    1bc8:	84 2b       	or	r24, r20
    1bca:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1bcc:	2a 96       	adiw	r28, 0x0a	; 10
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <H_PushButton_Void_PushButtonInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/

void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <H_PushButton_Void_PushButtonInit+0x6>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3b 83       	std	Y+3, r19	; 0x03
    1bf4:	2a 83       	std	Y+2, r18	; 0x02
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	d1 f0       	breq	.+52     	; 0x1c34 <H_PushButton_Void_PushButtonInit+0x56>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <H_PushButton_Void_PushButtonInit+0x36>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <H_PushButton_Void_PushButtonInit+0x4c>
    1c12:	1e c0       	rjmp	.+60     	; 0x1c50 <H_PushButton_Void_PushButtonInit+0x72>
    1c14:	2a 81       	ldd	r18, Y+2	; 0x02
    1c16:	3b 81       	ldd	r19, Y+3	; 0x03
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	81 f0       	breq	.+32     	; 0x1c3e <H_PushButton_Void_PushButtonInit+0x60>
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	81 f0       	breq	.+32     	; 0x1c48 <H_PushButton_Void_PushButtonInit+0x6a>
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    1c2a:	8f e2       	ldi	r24, 0x2F	; 47
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    1c34:	8e e2       	ldi	r24, 0x2E	; 46
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    1c3e:	8d e2       	ldi	r24, 0x2D	; 45
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    1c48:	8b e2       	ldi	r24, 0x2B	; 43
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	ec 97       	sbiw	r28, 0x3c	; 60
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    1c76:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3c af       	std	Y+60, r19	; 0x3c
    1c7e:	2b af       	std	Y+59, r18	; 0x3b
    1c80:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c82:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <H_PushButton_U8_PushButtonRead+0x30>
    1c8a:	9c c0       	rjmp	.+312    	; 0x1dc4 <H_PushButton_U8_PushButtonRead+0x168>
    1c8c:	2b ad       	ldd	r18, Y+59	; 0x3b
    1c8e:	3c ad       	ldd	r19, Y+60	; 0x3c
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <H_PushButton_U8_PushButtonRead+0x44>
    1c96:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c98:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	71 f0       	breq	.+28     	; 0x1cba <H_PushButton_U8_PushButtonRead+0x5e>
    1c9e:	1f c2       	rjmp	.+1086   	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
    1ca0:	2b ad       	ldd	r18, Y+59	; 0x3b
    1ca2:	3c ad       	ldd	r19, Y+60	; 0x3c
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <H_PushButton_U8_PushButtonRead+0x50>
    1caa:	11 c1       	rjmp	.+546    	; 0x1ece <H_PushButton_U8_PushButtonRead+0x272>
    1cac:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cae:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <H_PushButton_U8_PushButtonRead+0x5c>
    1cb6:	90 c1       	rjmp	.+800    	; 0x1fd8 <H_PushButton_U8_PushButtonRead+0x37c>
    1cb8:	12 c2       	rjmp	.+1060   	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1cba:	8f e2       	ldi	r24, 0x2F	; 47
    1cbc:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <H_PushButton_U8_PushButtonRead+0x6a>
    1cc4:	0c c2       	rjmp	.+1048   	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 ef       	ldi	r26, 0xF0	; 240
    1ccc:	b2 e4       	ldi	r27, 0x42	; 66
    1cce:	8d ab       	std	Y+53, r24	; 0x35
    1cd0:	9e ab       	std	Y+54, r25	; 0x36
    1cd2:	af ab       	std	Y+55, r26	; 0x37
    1cd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cda:	8f a9       	ldd	r24, Y+55	; 0x37
    1cdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	55 e4       	ldi	r21, 0x45	; 69
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	89 ab       	std	Y+49, r24	; 0x31
    1cf0:	9a ab       	std	Y+50, r25	; 0x32
    1cf2:	ab ab       	std	Y+51, r26	; 0x33
    1cf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	98 ab       	std	Y+48, r25	; 0x30
    1d14:	8f a7       	std	Y+47, r24	; 0x2f
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    1d18:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6d a9       	ldd	r22, Y+53	; 0x35
    1d32:	7e a9       	ldd	r23, Y+54	; 0x36
    1d34:	8f a9       	ldd	r24, Y+55	; 0x37
    1d36:	98 ad       	ldd	r25, Y+56	; 0x38
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	98 ab       	std	Y+48, r25	; 0x30
    1d56:	8f a7       	std	Y+47, r24	; 0x2f
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <H_PushButton_U8_PushButtonRead+0x11c>
    1d5a:	80 e9       	ldi	r24, 0x90	; 144
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	9e a7       	std	Y+46, r25	; 0x2e
    1d60:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <H_PushButton_U8_PushButtonRead+0x10a>
    1d6a:	9e a7       	std	Y+46, r25	; 0x2e
    1d6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d70:	98 a9       	ldd	r25, Y+48	; 0x30
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <H_PushButton_U8_PushButtonRead+0xfe>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	69 a9       	ldd	r22, Y+49	; 0x31
    1d84:	7a a9       	ldd	r23, Y+50	; 0x32
    1d86:	8b a9       	ldd	r24, Y+51	; 0x33
    1d88:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	98 ab       	std	Y+48, r25	; 0x30
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	9c a7       	std	Y+44, r25	; 0x2c
    1d9c:	8b a7       	std	Y+43, r24	; 0x2b
    1d9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <H_PushButton_U8_PushButtonRead+0x146>
    1da6:	9c a7       	std	Y+44, r25	; 0x2c
    1da8:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1daa:	8f e2       	ldi	r24, 0x2F	; 47
    1dac:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1db0:	88 23       	and	r24, r24
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <H_PushButton_U8_PushButtonRead+0x15a>
    1db4:	94 c1       	rjmp	.+808    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
    1db6:	8f e2       	ldi	r24, 0x2F	; 47
    1db8:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1dbc:	88 23       	and	r24, r24
    1dbe:	d9 f3       	breq	.-10     	; 0x1db6 <H_PushButton_U8_PushButtonRead+0x15a>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1dc0:	19 ae       	std	Y+57, r1	; 0x39
    1dc2:	8d c1       	rjmp	.+794    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1dc4:	8e e2       	ldi	r24, 0x2E	; 46
    1dc6:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1dca:	88 23       	and	r24, r24
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <H_PushButton_U8_PushButtonRead+0x174>
    1dce:	87 c1       	rjmp	.+782    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 ef       	ldi	r26, 0xF0	; 240
    1dd6:	b2 e4       	ldi	r27, 0x42	; 66
    1dd8:	8f a3       	std	Y+39, r24	; 0x27
    1dda:	98 a7       	std	Y+40, r25	; 0x28
    1ddc:	a9 a7       	std	Y+41, r26	; 0x29
    1dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6f a1       	ldd	r22, Y+39	; 0x27
    1de2:	78 a5       	ldd	r23, Y+40	; 0x28
    1de4:	89 a5       	ldd	r24, Y+41	; 0x29
    1de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a e7       	ldi	r20, 0x7A	; 122
    1dee:	55 e4       	ldi	r21, 0x45	; 69
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8b a3       	std	Y+35, r24	; 0x23
    1dfa:	9c a3       	std	Y+36, r25	; 0x24
    1dfc:	ad a3       	std	Y+37, r26	; 0x25
    1dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <H_PushButton_U8_PushButtonRead+0x1c6>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a a3       	std	Y+34, r25	; 0x22
    1e1e:	89 a3       	std	Y+33, r24	; 0x21
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <H_PushButton_U8_PushButtonRead+0x244>
	else if (__tmp > 65535)
    1e22:	6b a1       	ldd	r22, Y+35	; 0x23
    1e24:	7c a1       	ldd	r23, Y+36	; 0x24
    1e26:	8d a1       	ldd	r24, Y+37	; 0x25
    1e28:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <H_PushButton_U8_PushButtonRead+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <H_PushButton_U8_PushButtonRead+0x226>
    1e64:	80 e9       	ldi	r24, 0x90	; 144
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	98 a3       	std	Y+32, r25	; 0x20
    1e6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <H_PushButton_U8_PushButtonRead+0x214>
    1e74:	98 a3       	std	Y+32, r25	; 0x20
    1e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <H_PushButton_U8_PushButtonRead+0x208>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <H_PushButton_U8_PushButtonRead+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9a a3       	std	Y+34, r25	; 0x22
    1e9e:	89 a3       	std	Y+33, r24	; 0x21
    1ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <H_PushButton_U8_PushButtonRead+0x250>
    1eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb2:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1eb4:	8e e2       	ldi	r24, 0x2E	; 46
    1eb6:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1eba:	88 23       	and	r24, r24
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <H_PushButton_U8_PushButtonRead+0x264>
    1ebe:	0f c1       	rjmp	.+542    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
    1ec0:	8e e2       	ldi	r24, 0x2E	; 46
    1ec2:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1ec6:	88 23       	and	r24, r24
    1ec8:	d9 f3       	breq	.-10     	; 0x1ec0 <H_PushButton_U8_PushButtonRead+0x264>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1eca:	19 ae       	std	Y+57, r1	; 0x39
    1ecc:	08 c1       	rjmp	.+528    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1ece:	8d e2       	ldi	r24, 0x2D	; 45
    1ed0:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1ed4:	88 23       	and	r24, r24
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <H_PushButton_U8_PushButtonRead+0x27e>
    1ed8:	02 c1       	rjmp	.+516    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 ef       	ldi	r26, 0xF0	; 240
    1ee0:	b2 e4       	ldi	r27, 0x42	; 66
    1ee2:	89 8f       	std	Y+25, r24	; 0x19
    1ee4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	69 8d       	ldd	r22, Y+25	; 0x19
    1eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a e7       	ldi	r20, 0x7A	; 122
    1ef8:	55 e4       	ldi	r21, 0x45	; 69
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8d 8b       	std	Y+21, r24	; 0x15
    1f04:	9e 8b       	std	Y+22, r25	; 0x16
    1f06:	af 8b       	std	Y+23, r26	; 0x17
    1f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f10:	98 8d       	ldd	r25, Y+24	; 0x18
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <H_PushButton_U8_PushButtonRead+0x2d0>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <H_PushButton_U8_PushButtonRead+0x34e>
	else if (__tmp > 65535)
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <H_PushButton_U8_PushButtonRead+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	69 8d       	ldd	r22, Y+25	; 0x19
    1f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <H_PushButton_U8_PushButtonRead+0x330>
    1f6e:	80 e9       	ldi	r24, 0x90	; 144
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	9a 8b       	std	Y+18, r25	; 0x12
    1f74:	89 8b       	std	Y+17, r24	; 0x11
    1f76:	89 89       	ldd	r24, Y+17	; 0x11
    1f78:	9a 89       	ldd	r25, Y+18	; 0x12
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <H_PushButton_U8_PushButtonRead+0x31e>
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9c 8b       	std	Y+20, r25	; 0x14
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <H_PushButton_U8_PushButtonRead+0x312>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <H_PushButton_U8_PushButtonRead+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	6d 89       	ldd	r22, Y+21	; 0x15
    1f98:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	98 8b       	std	Y+16, r25	; 0x10
    1fb0:	8f 87       	std	Y+15, r24	; 0x0f
    1fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb4:	98 89       	ldd	r25, Y+16	; 0x10
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <H_PushButton_U8_PushButtonRead+0x35a>
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1fbe:	8d e2       	ldi	r24, 0x2D	; 45
    1fc0:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <H_PushButton_U8_PushButtonRead+0x36e>
    1fc8:	8a c0       	rjmp	.+276    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
    1fca:	8d e2       	ldi	r24, 0x2D	; 45
    1fcc:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1fd0:	88 23       	and	r24, r24
    1fd2:	d9 f3       	breq	.-10     	; 0x1fca <H_PushButton_U8_PushButtonRead+0x36e>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1fd4:	19 ae       	std	Y+57, r1	; 0x39
    1fd6:	83 c0       	rjmp	.+262    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    1fd8:	8b e2       	ldi	r24, 0x2B	; 43
    1fda:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <H_PushButton_U8_PushButtonRead+0x388>
    1fe2:	7d c0       	rjmp	.+250    	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 ef       	ldi	r26, 0xF0	; 240
    1fea:	b2 e4       	ldi	r27, 0x42	; 66
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    1fee:	9c 87       	std	Y+12, r25	; 0x0c
    1ff0:	ad 87       	std	Y+13, r26	; 0x0d
    1ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	55 e4       	ldi	r21, 0x45	; 69
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
    2010:	a9 87       	std	Y+9, r26	; 0x09
    2012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <H_PushButton_U8_PushButtonRead+0x3da>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <H_PushButton_U8_PushButtonRead+0x458>
	else if (__tmp > 65535)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <H_PushButton_U8_PushButtonRead+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <H_PushButton_U8_PushButtonRead+0x43a>
    2078:	80 e9       	ldi	r24, 0x90	; 144
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <H_PushButton_U8_PushButtonRead+0x428>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <H_PushButton_U8_PushButtonRead+0x41c>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <H_PushButton_U8_PushButtonRead+0x46c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <H_PushButton_U8_PushButtonRead+0x464>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    20c8:	8b e2       	ldi	r24, 0x2B	; 43
    20ca:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    20ce:	88 23       	and	r24, r24
    20d0:	31 f4       	brne	.+12     	; 0x20de <H_PushButton_U8_PushButtonRead+0x482>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
    20d2:	8b e2       	ldi	r24, 0x2B	; 43
    20d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_DIO_Void_GetPinValue>
    20d8:	88 23       	and	r24, r24
    20da:	d9 f3       	breq	.-10     	; 0x20d2 <H_PushButton_U8_PushButtonRead+0x476>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    20dc:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    20de:	89 ad       	ldd	r24, Y+57	; 0x39
}
    20e0:	ec 96       	adiw	r28, 0x3c	; 60
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <H_LED_Void_LedInit+0x6>
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	3b 83       	std	Y+3, r19	; 0x03
    2108:	2a 83       	std	Y+2, r18	; 0x02
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	82 30       	cpi	r24, 0x02	; 2
    2110:	91 05       	cpc	r25, r1
    2112:	d9 f0       	breq	.+54     	; 0x214a <H_LED_Void_LedInit+0x58>
    2114:	2a 81       	ldd	r18, Y+2	; 0x02
    2116:	3b 81       	ldd	r19, Y+3	; 0x03
    2118:	23 30       	cpi	r18, 0x03	; 3
    211a:	31 05       	cpc	r19, r1
    211c:	34 f4       	brge	.+12     	; 0x212a <H_LED_Void_LedInit+0x38>
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	91 05       	cpc	r25, r1
    2126:	61 f0       	breq	.+24     	; 0x2140 <H_LED_Void_LedInit+0x4e>
    2128:	1e c0       	rjmp	.+60     	; 0x2166 <H_LED_Void_LedInit+0x74>
    212a:	2a 81       	ldd	r18, Y+2	; 0x02
    212c:	3b 81       	ldd	r19, Y+3	; 0x03
    212e:	23 30       	cpi	r18, 0x03	; 3
    2130:	31 05       	cpc	r19, r1
    2132:	81 f0       	breq	.+32     	; 0x2154 <H_LED_Void_LedInit+0x62>
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	91 05       	cpc	r25, r1
    213c:	81 f0       	breq	.+32     	; 0x215e <H_LED_Void_LedInit+0x6c>
    213e:	13 c0       	rjmp	.+38     	; 0x2166 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    2140:	80 e1       	ldi	r24, 0x10	; 16
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    2148:	0e c0       	rjmp	.+28     	; 0x2166 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    214a:	8f e0       	ldi	r24, 0x0F	; 15
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2154:	8e e0       	ldi	r24, 0x0E	; 14
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    215e:	8b e1       	ldi	r24, 0x1B	; 27
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <H_LED_Void_LedOn+0x6>
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	3b 83       	std	Y+3, r19	; 0x03
    2188:	2a 83       	std	Y+2, r18	; 0x02
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	91 05       	cpc	r25, r1
    2192:	d9 f0       	breq	.+54     	; 0x21ca <H_LED_Void_LedOn+0x58>
    2194:	2a 81       	ldd	r18, Y+2	; 0x02
    2196:	3b 81       	ldd	r19, Y+3	; 0x03
    2198:	23 30       	cpi	r18, 0x03	; 3
    219a:	31 05       	cpc	r19, r1
    219c:	34 f4       	brge	.+12     	; 0x21aa <H_LED_Void_LedOn+0x38>
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	91 05       	cpc	r25, r1
    21a6:	61 f0       	breq	.+24     	; 0x21c0 <H_LED_Void_LedOn+0x4e>
    21a8:	1e c0       	rjmp	.+60     	; 0x21e6 <H_LED_Void_LedOn+0x74>
    21aa:	2a 81       	ldd	r18, Y+2	; 0x02
    21ac:	3b 81       	ldd	r19, Y+3	; 0x03
    21ae:	23 30       	cpi	r18, 0x03	; 3
    21b0:	31 05       	cpc	r19, r1
    21b2:	81 f0       	breq	.+32     	; 0x21d4 <H_LED_Void_LedOn+0x62>
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	91 05       	cpc	r25, r1
    21bc:	81 f0       	breq	.+32     	; 0x21de <H_LED_Void_LedOn+0x6c>
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    21c0:	80 e1       	ldi	r24, 0x10	; 16
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    21ca:	8f e0       	ldi	r24, 0x0F	; 15
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    21d4:	8e e0       	ldi	r24, 0x0E	; 14
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    21de:	8b e1       	ldi	r24, 0x1B	; 27
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <H_LED_Void_LedOff+0x6>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	3b 83       	std	Y+3, r19	; 0x03
    2208:	2a 83       	std	Y+2, r18	; 0x02
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	91 05       	cpc	r25, r1
    2212:	d9 f0       	breq	.+54     	; 0x224a <H_LED_Void_LedOff+0x58>
    2214:	2a 81       	ldd	r18, Y+2	; 0x02
    2216:	3b 81       	ldd	r19, Y+3	; 0x03
    2218:	23 30       	cpi	r18, 0x03	; 3
    221a:	31 05       	cpc	r19, r1
    221c:	34 f4       	brge	.+12     	; 0x222a <H_LED_Void_LedOff+0x38>
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	91 05       	cpc	r25, r1
    2226:	61 f0       	breq	.+24     	; 0x2240 <H_LED_Void_LedOff+0x4e>
    2228:	1e c0       	rjmp	.+60     	; 0x2266 <H_LED_Void_LedOff+0x74>
    222a:	2a 81       	ldd	r18, Y+2	; 0x02
    222c:	3b 81       	ldd	r19, Y+3	; 0x03
    222e:	23 30       	cpi	r18, 0x03	; 3
    2230:	31 05       	cpc	r19, r1
    2232:	81 f0       	breq	.+32     	; 0x2254 <H_LED_Void_LedOff+0x62>
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	9b 81       	ldd	r25, Y+3	; 0x03
    2238:	84 30       	cpi	r24, 0x04	; 4
    223a:	91 05       	cpc	r25, r1
    223c:	81 f0       	breq	.+32     	; 0x225e <H_LED_Void_LedOff+0x6c>
    223e:	13 c0       	rjmp	.+38     	; 0x2266 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    2240:	80 e1       	ldi	r24, 0x10	; 16
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2248:	0e c0       	rjmp	.+28     	; 0x2266 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    224a:	8f e0       	ldi	r24, 0x0F	; 15
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2254:	8e e0       	ldi	r24, 0x0E	; 14
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    225e:	8b e1       	ldi	r24, 0x1B	; 27
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	eb 97       	sbiw	r28, 0x3b	; 59
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2288:	89 ad       	ldd	r24, Y+57	; 0x39
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	3b af       	std	Y+59, r19	; 0x3b
    2290:	2a af       	std	Y+58, r18	; 0x3a
    2292:	8a ad       	ldd	r24, Y+58	; 0x3a
    2294:	9b ad       	ldd	r25, Y+59	; 0x3b
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	91 05       	cpc	r25, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <H_LED_Void_LedBlink+0x2c>
    229c:	93 c0       	rjmp	.+294    	; 0x23c4 <H_LED_Void_LedBlink+0x152>
    229e:	2a ad       	ldd	r18, Y+58	; 0x3a
    22a0:	3b ad       	ldd	r19, Y+59	; 0x3b
    22a2:	23 30       	cpi	r18, 0x03	; 3
    22a4:	31 05       	cpc	r19, r1
    22a6:	34 f4       	brge	.+12     	; 0x22b4 <H_LED_Void_LedBlink+0x42>
    22a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    22aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	91 05       	cpc	r25, r1
    22b0:	71 f0       	breq	.+28     	; 0x22ce <H_LED_Void_LedBlink+0x5c>
    22b2:	f8 c1       	rjmp	.+1008   	; 0x26a4 <H_LED_Void_LedBlink+0x432>
    22b4:	2a ad       	ldd	r18, Y+58	; 0x3a
    22b6:	3b ad       	ldd	r19, Y+59	; 0x3b
    22b8:	23 30       	cpi	r18, 0x03	; 3
    22ba:	31 05       	cpc	r19, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <H_LED_Void_LedBlink+0x4e>
    22be:	fd c0       	rjmp	.+506    	; 0x24ba <H_LED_Void_LedBlink+0x248>
    22c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    22c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    22c4:	84 30       	cpi	r24, 0x04	; 4
    22c6:	91 05       	cpc	r25, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <H_LED_Void_LedBlink+0x5a>
    22ca:	72 c1       	rjmp	.+740    	; 0x25b0 <H_LED_Void_LedBlink+0x33e>
    22cc:	eb c1       	rjmp	.+982    	; 0x26a4 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	aa e7       	ldi	r26, 0x7A	; 122
    22dc:	b3 e4       	ldi	r27, 0x43	; 67
    22de:	8d ab       	std	Y+53, r24	; 0x35
    22e0:	9e ab       	std	Y+54, r25	; 0x36
    22e2:	af ab       	std	Y+55, r26	; 0x37
    22e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	6d a9       	ldd	r22, Y+53	; 0x35
    22e8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ea:	8f a9       	ldd	r24, Y+55	; 0x37
    22ec:	98 ad       	ldd	r25, Y+56	; 0x38
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	55 e4       	ldi	r21, 0x45	; 69
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	89 ab       	std	Y+49, r24	; 0x31
    2300:	9a ab       	std	Y+50, r25	; 0x32
    2302:	ab ab       	std	Y+51, r26	; 0x33
    2304:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2306:	69 a9       	ldd	r22, Y+49	; 0x31
    2308:	7a a9       	ldd	r23, Y+50	; 0x32
    230a:	8b a9       	ldd	r24, Y+51	; 0x33
    230c:	9c a9       	ldd	r25, Y+52	; 0x34
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	98 ab       	std	Y+48, r25	; 0x30
    2324:	8f a7       	std	Y+47, r24	; 0x2f
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2328:	69 a9       	ldd	r22, Y+49	; 0x31
    232a:	7a a9       	ldd	r23, Y+50	; 0x32
    232c:	8b a9       	ldd	r24, Y+51	; 0x33
    232e:	9c a9       	ldd	r25, Y+52	; 0x34
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	6d a9       	ldd	r22, Y+53	; 0x35
    2342:	7e a9       	ldd	r23, Y+54	; 0x36
    2344:	8f a9       	ldd	r24, Y+55	; 0x37
    2346:	98 ad       	ldd	r25, Y+56	; 0x38
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	98 ab       	std	Y+48, r25	; 0x30
    2366:	8f a7       	std	Y+47, r24	; 0x2f
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <H_LED_Void_LedBlink+0x116>
    236a:	80 e9       	ldi	r24, 0x90	; 144
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	9e a7       	std	Y+46, r25	; 0x2e
    2370:	8d a7       	std	Y+45, r24	; 0x2d
    2372:	8d a5       	ldd	r24, Y+45	; 0x2d
    2374:	9e a5       	ldd	r25, Y+46	; 0x2e
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <H_LED_Void_LedBlink+0x104>
    237a:	9e a7       	std	Y+46, r25	; 0x2e
    237c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2380:	98 a9       	ldd	r25, Y+48	; 0x30
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8f a5       	ldd	r24, Y+47	; 0x2f
    238a:	98 a9       	ldd	r25, Y+48	; 0x30
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <H_LED_Void_LedBlink+0xf8>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	69 a9       	ldd	r22, Y+49	; 0x31
    2394:	7a a9       	ldd	r23, Y+50	; 0x32
    2396:	8b a9       	ldd	r24, Y+51	; 0x33
    2398:	9c a9       	ldd	r25, Y+52	; 0x34
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
    23a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a8:	98 a9       	ldd	r25, Y+48	; 0x30
    23aa:	9c a7       	std	Y+44, r25	; 0x2c
    23ac:	8b a7       	std	Y+43, r24	; 0x2b
    23ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <H_LED_Void_LedBlink+0x140>
    23b6:	9c a7       	std	Y+44, r25	; 0x2c
    23b8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    23ba:	80 e1       	ldi	r24, 0x10	; 16
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    23c2:	70 c1       	rjmp	.+736    	; 0x26a4 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    23c4:	8f e0       	ldi	r24, 0x0F	; 15
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	aa e7       	ldi	r26, 0x7A	; 122
    23d2:	b3 e4       	ldi	r27, 0x43	; 67
    23d4:	8f a3       	std	Y+39, r24	; 0x27
    23d6:	98 a7       	std	Y+40, r25	; 0x28
    23d8:	a9 a7       	std	Y+41, r26	; 0x29
    23da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	6f a1       	ldd	r22, Y+39	; 0x27
    23de:	78 a5       	ldd	r23, Y+40	; 0x28
    23e0:	89 a5       	ldd	r24, Y+41	; 0x29
    23e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	4a e7       	ldi	r20, 0x7A	; 122
    23ea:	55 e4       	ldi	r21, 0x45	; 69
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8b a3       	std	Y+35, r24	; 0x23
    23f6:	9c a3       	std	Y+36, r25	; 0x24
    23f8:	ad a3       	std	Y+37, r26	; 0x25
    23fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	2c f4       	brge	.+10     	; 0x241e <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	3f c0       	rjmp	.+126    	; 0x249c <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    241e:	6b a1       	ldd	r22, Y+35	; 0x23
    2420:	7c a1       	ldd	r23, Y+36	; 0x24
    2422:	8d a1       	ldd	r24, Y+37	; 0x25
    2424:	9e a1       	ldd	r25, Y+38	; 0x26
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	4c f5       	brge	.+82     	; 0x2488 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	6f a1       	ldd	r22, Y+39	; 0x27
    2438:	78 a5       	ldd	r23, Y+40	; 0x28
    243a:	89 a5       	ldd	r24, Y+41	; 0x29
    243c:	9a a5       	ldd	r25, Y+42	; 0x2a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	0f c0       	rjmp	.+30     	; 0x247e <H_LED_Void_LedBlink+0x20c>
    2460:	80 e9       	ldi	r24, 0x90	; 144
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	98 a3       	std	Y+32, r25	; 0x20
    2466:	8f 8f       	std	Y+31, r24	; 0x1f
    2468:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246a:	98 a1       	ldd	r25, Y+32	; 0x20
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <H_LED_Void_LedBlink+0x1fa>
    2470:	98 a3       	std	Y+32, r25	; 0x20
    2472:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9a a3       	std	Y+34, r25	; 0x22
    247c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	89 a1       	ldd	r24, Y+33	; 0x21
    2480:	9a a1       	ldd	r25, Y+34	; 0x22
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <H_LED_Void_LedBlink+0x1ee>
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	6b a1       	ldd	r22, Y+35	; 0x23
    248a:	7c a1       	ldd	r23, Y+36	; 0x24
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	9e a1       	ldd	r25, Y+38	; 0x26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
    249c:	89 a1       	ldd	r24, Y+33	; 0x21
    249e:	9a a1       	ldd	r25, Y+34	; 0x22
    24a0:	9e 8f       	std	Y+30, r25	; 0x1e
    24a2:	8d 8f       	std	Y+29, r24	; 0x1d
    24a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <H_LED_Void_LedBlink+0x236>
    24ac:	9e 8f       	std	Y+30, r25	; 0x1e
    24ae:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    24b0:	8f e0       	ldi	r24, 0x0F	; 15
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    24b8:	f5 c0       	rjmp	.+490    	; 0x26a4 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    24ba:	8e e0       	ldi	r24, 0x0E	; 14
    24bc:	61 e0       	ldi	r22, 0x01	; 1
    24be:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	aa e7       	ldi	r26, 0x7A	; 122
    24c8:	b3 e4       	ldi	r27, 0x43	; 67
    24ca:	89 8f       	std	Y+25, r24	; 0x19
    24cc:	9a 8f       	std	Y+26, r25	; 0x1a
    24ce:	ab 8f       	std	Y+27, r26	; 0x1b
    24d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a e7       	ldi	r20, 0x7A	; 122
    24e0:	55 e4       	ldi	r21, 0x45	; 69
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8d 8b       	std	Y+21, r24	; 0x15
    24ec:	9e 8b       	std	Y+22, r25	; 0x16
    24ee:	af 8b       	std	Y+23, r26	; 0x17
    24f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	69 8d       	ldd	r22, Y+25	; 0x19
    252e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <H_LED_Void_LedBlink+0x302>
    2556:	80 e9       	ldi	r24, 0x90	; 144
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	9a 8b       	std	Y+18, r25	; 0x12
    255c:	89 8b       	std	Y+17, r24	; 0x11
    255e:	89 89       	ldd	r24, Y+17	; 0x11
    2560:	9a 89       	ldd	r25, Y+18	; 0x12
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <H_LED_Void_LedBlink+0x2f0>
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <H_LED_Void_LedBlink+0x2e4>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	98 8b       	std	Y+16, r25	; 0x10
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	98 89       	ldd	r25, Y+16	; 0x10
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <H_LED_Void_LedBlink+0x32c>
    25a2:	98 8b       	std	Y+16, r25	; 0x10
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    25a6:	8e e0       	ldi	r24, 0x0E	; 14
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    25ae:	7a c0       	rjmp	.+244    	; 0x26a4 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    25b0:	8b e1       	ldi	r24, 0x1B	; 27
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	aa e7       	ldi	r26, 0x7A	; 122
    25be:	b3 e4       	ldi	r27, 0x43	; 67
    25c0:	8b 87       	std	Y+11, r24	; 0x0b
    25c2:	9c 87       	std	Y+12, r25	; 0x0c
    25c4:	ad 87       	std	Y+13, r26	; 0x0d
    25c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	55 e4       	ldi	r21, 0x45	; 69
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8f 83       	std	Y+7, r24	; 0x07
    25e2:	98 87       	std	Y+8, r25	; 0x08
    25e4:	a9 87       	std	Y+9, r26	; 0x09
    25e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ea:	78 85       	ldd	r23, Y+8	; 0x08
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e8       	ldi	r20, 0x80	; 128
    25f6:	5f e3       	ldi	r21, 0x3F	; 63
    25f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fc:	88 23       	and	r24, r24
    25fe:	2c f4       	brge	.+10     	; 0x260a <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	8d 83       	std	Y+5, r24	; 0x05
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	3f ef       	ldi	r19, 0xFF	; 255
    2616:	4f e7       	ldi	r20, 0x7F	; 127
    2618:	57 e4       	ldi	r21, 0x47	; 71
    261a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261e:	18 16       	cp	r1, r24
    2620:	4c f5       	brge	.+82     	; 0x2674 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	0f c0       	rjmp	.+30     	; 0x266a <H_LED_Void_LedBlink+0x3f8>
    264c:	80 e9       	ldi	r24, 0x90	; 144
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <H_LED_Void_LedBlink+0x3e6>
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	8d 81       	ldd	r24, Y+5	; 0x05
    2662:	9e 81       	ldd	r25, Y+6	; 0x06
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f7       	brne	.-38     	; 0x264c <H_LED_Void_LedBlink+0x3da>
    2672:	14 c0       	rjmp	.+40     	; 0x269c <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	6f 81       	ldd	r22, Y+7	; 0x07
    2676:	78 85       	ldd	r23, Y+8	; 0x08
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <H_LED_Void_LedBlink+0x422>
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    269c:	8b e1       	ldi	r24, 0x1B	; 27
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    26a4:	eb 96       	adiw	r28, 0x3b	; 59
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <H_LED_Void_LedTog+0x6>
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	3b 83       	std	Y+3, r19	; 0x03
    26cc:	2a 83       	std	Y+2, r18	; 0x02
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	9b 81       	ldd	r25, Y+3	; 0x03
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	91 05       	cpc	r25, r1
    26d6:	d1 f0       	breq	.+52     	; 0x270c <H_LED_Void_LedTog+0x56>
    26d8:	2a 81       	ldd	r18, Y+2	; 0x02
    26da:	3b 81       	ldd	r19, Y+3	; 0x03
    26dc:	23 30       	cpi	r18, 0x03	; 3
    26de:	31 05       	cpc	r19, r1
    26e0:	34 f4       	brge	.+12     	; 0x26ee <H_LED_Void_LedTog+0x38>
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	91 05       	cpc	r25, r1
    26ea:	61 f0       	breq	.+24     	; 0x2704 <H_LED_Void_LedTog+0x4e>
    26ec:	1a c0       	rjmp	.+52     	; 0x2722 <H_LED_Void_LedTog+0x6c>
    26ee:	2a 81       	ldd	r18, Y+2	; 0x02
    26f0:	3b 81       	ldd	r19, Y+3	; 0x03
    26f2:	23 30       	cpi	r18, 0x03	; 3
    26f4:	31 05       	cpc	r19, r1
    26f6:	71 f0       	breq	.+28     	; 0x2714 <H_LED_Void_LedTog+0x5e>
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	84 30       	cpi	r24, 0x04	; 4
    26fe:	91 05       	cpc	r25, r1
    2700:	69 f0       	breq	.+26     	; 0x271c <H_LED_Void_LedTog+0x66>
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2704:	80 e1       	ldi	r24, 0x10	; 16
    2706:	0e 94 4d 0c 	call	0x189a	; 0x189a <M_DIO_Void_TogPin>
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    270c:	8f e0       	ldi	r24, 0x0F	; 15
    270e:	0e 94 4d 0c 	call	0x189a	; 0x189a <M_DIO_Void_TogPin>
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2714:	8e e0       	ldi	r24, 0x0E	; 14
    2716:	0e 94 4d 0c 	call	0x189a	; 0x189a <M_DIO_Void_TogPin>
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    271c:	8b e1       	ldi	r24, 0x1B	; 27
    271e:	0e 94 4d 0c 	call	0x189a	; 0x189a <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    2736:	84 e1       	ldi	r24, 0x14	; 20
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    273e:	85 e1       	ldi	r24, 0x15	; 21
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    2746:	86 e1       	ldi	r24, 0x16	; 22
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    274e:	88 e1       	ldi	r24, 0x18	; 24
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    2756:	8d e0       	ldi	r24, 0x0D	; 13
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    275e:	8c e0       	ldi	r24, 0x0C	; 12
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    2766:	83 e3       	ldi	r24, 0x33	; 51
    2768:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    276c:	82 e3       	ldi	r24, 0x32	; 50
    276e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    2772:	88 e2       	ldi	r24, 0x28	; 40
    2774:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    2778:	8c e0       	ldi	r24, 0x0C	; 12
    277a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	e9 97       	sbiw	r28, 0x39	; 57
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    27a6:	8d e0       	ldi	r24, 0x0D	; 13
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    27ae:	89 ad       	ldd	r24, Y+57	; 0x39
    27b0:	82 95       	swap	r24
    27b2:	8f 70       	andi	r24, 0x0F	; 15
    27b4:	98 2f       	mov	r25, r24
    27b6:	91 70       	andi	r25, 0x01	; 1
    27b8:	84 e1       	ldi	r24, 0x14	; 20
    27ba:	69 2f       	mov	r22, r25
    27bc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    27c0:	89 ad       	ldd	r24, Y+57	; 0x39
    27c2:	82 95       	swap	r24
    27c4:	86 95       	lsr	r24
    27c6:	87 70       	andi	r24, 0x07	; 7
    27c8:	98 2f       	mov	r25, r24
    27ca:	91 70       	andi	r25, 0x01	; 1
    27cc:	85 e1       	ldi	r24, 0x15	; 21
    27ce:	69 2f       	mov	r22, r25
    27d0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    27d4:	89 ad       	ldd	r24, Y+57	; 0x39
    27d6:	82 95       	swap	r24
    27d8:	86 95       	lsr	r24
    27da:	86 95       	lsr	r24
    27dc:	83 70       	andi	r24, 0x03	; 3
    27de:	98 2f       	mov	r25, r24
    27e0:	91 70       	andi	r25, 0x01	; 1
    27e2:	86 e1       	ldi	r24, 0x16	; 22
    27e4:	69 2f       	mov	r22, r25
    27e6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    27ea:	89 ad       	ldd	r24, Y+57	; 0x39
    27ec:	98 2f       	mov	r25, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	99 27       	eor	r25, r25
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 e1       	ldi	r24, 0x18	; 24
    27f6:	69 2f       	mov	r22, r25
    27f8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    27fc:	8c e0       	ldi	r24, 0x0C	; 12
    27fe:	61 e0       	ldi	r22, 0x01	; 1
    2800:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e8       	ldi	r26, 0x80	; 128
    280a:	bf e3       	ldi	r27, 0x3F	; 63
    280c:	8d ab       	std	Y+53, r24	; 0x35
    280e:	9e ab       	std	Y+54, r25	; 0x36
    2810:	af ab       	std	Y+55, r26	; 0x37
    2812:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6d a9       	ldd	r22, Y+53	; 0x35
    2816:	7e a9       	ldd	r23, Y+54	; 0x36
    2818:	8f a9       	ldd	r24, Y+55	; 0x37
    281a:	98 ad       	ldd	r25, Y+56	; 0x38
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a e7       	ldi	r20, 0x7A	; 122
    2822:	55 e4       	ldi	r21, 0x45	; 69
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	89 ab       	std	Y+49, r24	; 0x31
    282e:	9a ab       	std	Y+50, r25	; 0x32
    2830:	ab ab       	std	Y+51, r26	; 0x33
    2832:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2834:	69 a9       	ldd	r22, Y+49	; 0x31
    2836:	7a a9       	ldd	r23, Y+50	; 0x32
    2838:	8b a9       	ldd	r24, Y+51	; 0x33
    283a:	9c a9       	ldd	r25, Y+52	; 0x34
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	98 ab       	std	Y+48, r25	; 0x30
    2852:	8f a7       	std	Y+47, r24	; 0x2f
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    2856:	69 a9       	ldd	r22, Y+49	; 0x31
    2858:	7a a9       	ldd	r23, Y+50	; 0x32
    285a:	8b a9       	ldd	r24, Y+51	; 0x33
    285c:	9c a9       	ldd	r25, Y+52	; 0x34
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6d a9       	ldd	r22, Y+53	; 0x35
    2870:	7e a9       	ldd	r23, Y+54	; 0x36
    2872:	8f a9       	ldd	r24, Y+55	; 0x37
    2874:	98 ad       	ldd	r25, Y+56	; 0x38
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	98 ab       	std	Y+48, r25	; 0x30
    2894:	8f a7       	std	Y+47, r24	; 0x2f
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <H_Lcd_Void_LCDWriteCharacter+0x126>
    2898:	80 e9       	ldi	r24, 0x90	; 144
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	9e a7       	std	Y+46, r25	; 0x2e
    289e:	8d a7       	std	Y+45, r24	; 0x2d
    28a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <H_Lcd_Void_LCDWriteCharacter+0x114>
    28a8:	9e a7       	std	Y+46, r25	; 0x2e
    28aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ae:	98 a9       	ldd	r25, Y+48	; 0x30
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	98 ab       	std	Y+48, r25	; 0x30
    28b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <H_Lcd_Void_LCDWriteCharacter+0x108>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	69 a9       	ldd	r22, Y+49	; 0x31
    28c2:	7a a9       	ldd	r23, Y+50	; 0x32
    28c4:	8b a9       	ldd	r24, Y+51	; 0x33
    28c6:	9c a9       	ldd	r25, Y+52	; 0x34
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	98 ab       	std	Y+48, r25	; 0x30
    28d2:	8f a7       	std	Y+47, r24	; 0x2f
    28d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d6:	98 a9       	ldd	r25, Y+48	; 0x30
    28d8:	9c a7       	std	Y+44, r25	; 0x2c
    28da:	8b a7       	std	Y+43, r24	; 0x2b
    28dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    28de:	9c a5       	ldd	r25, Y+44	; 0x2c
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <H_Lcd_Void_LCDWriteCharacter+0x150>
    28e4:	9c a7       	std	Y+44, r25	; 0x2c
    28e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    28e8:	8c e0       	ldi	r24, 0x0C	; 12
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 e8       	ldi	r26, 0x80	; 128
    28f6:	bf e3       	ldi	r27, 0x3F	; 63
    28f8:	8f a3       	std	Y+39, r24	; 0x27
    28fa:	98 a7       	std	Y+40, r25	; 0x28
    28fc:	a9 a7       	std	Y+41, r26	; 0x29
    28fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2900:	6f a1       	ldd	r22, Y+39	; 0x27
    2902:	78 a5       	ldd	r23, Y+40	; 0x28
    2904:	89 a5       	ldd	r24, Y+41	; 0x29
    2906:	9a a5       	ldd	r25, Y+42	; 0x2a
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4a e7       	ldi	r20, 0x7A	; 122
    290e:	55 e4       	ldi	r21, 0x45	; 69
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8b a3       	std	Y+35, r24	; 0x23
    291a:	9c a3       	std	Y+36, r25	; 0x24
    291c:	ad a3       	std	Y+37, r26	; 0x25
    291e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e8       	ldi	r20, 0x80	; 128
    292e:	5f e3       	ldi	r21, 0x3F	; 63
    2930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2934:	88 23       	and	r24, r24
    2936:	2c f4       	brge	.+10     	; 0x2942 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9a a3       	std	Y+34, r25	; 0x22
    293e:	89 a3       	std	Y+33, r24	; 0x21
    2940:	3f c0       	rjmp	.+126    	; 0x29c0 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2942:	6b a1       	ldd	r22, Y+35	; 0x23
    2944:	7c a1       	ldd	r23, Y+36	; 0x24
    2946:	8d a1       	ldd	r24, Y+37	; 0x25
    2948:	9e a1       	ldd	r25, Y+38	; 0x26
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	4c f5       	brge	.+82     	; 0x29ac <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	6f a1       	ldd	r22, Y+39	; 0x27
    295c:	78 a5       	ldd	r23, Y+40	; 0x28
    295e:	89 a5       	ldd	r24, Y+41	; 0x29
    2960:	9a a5       	ldd	r25, Y+42	; 0x2a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e2       	ldi	r20, 0x20	; 32
    2968:	51 e4       	ldi	r21, 0x41	; 65
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
    2982:	0f c0       	rjmp	.+30     	; 0x29a2 <H_Lcd_Void_LCDWriteCharacter+0x212>
    2984:	80 e9       	ldi	r24, 0x90	; 144
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	98 a3       	std	Y+32, r25	; 0x20
    298a:	8f 8f       	std	Y+31, r24	; 0x1f
    298c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    298e:	98 a1       	ldd	r25, Y+32	; 0x20
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <H_Lcd_Void_LCDWriteCharacter+0x200>
    2994:	98 a3       	std	Y+32, r25	; 0x20
    2996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	9a a3       	std	Y+34, r25	; 0x22
    29a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a2:	89 a1       	ldd	r24, Y+33	; 0x21
    29a4:	9a a1       	ldd	r25, Y+34	; 0x22
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	69 f7       	brne	.-38     	; 0x2984 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ac:	6b a1       	ldd	r22, Y+35	; 0x23
    29ae:	7c a1       	ldd	r23, Y+36	; 0x24
    29b0:	8d a1       	ldd	r24, Y+37	; 0x25
    29b2:	9e a1       	ldd	r25, Y+38	; 0x26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	89 a1       	ldd	r24, Y+33	; 0x21
    29c2:	9a a1       	ldd	r25, Y+34	; 0x22
    29c4:	9e 8f       	std	Y+30, r25	; 0x1e
    29c6:	8d 8f       	std	Y+29, r24	; 0x1d
    29c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <H_Lcd_Void_LCDWriteCharacter+0x23c>
    29d0:	9e 8f       	std	Y+30, r25	; 0x1e
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    29d4:	89 ad       	ldd	r24, Y+57	; 0x39
    29d6:	98 2f       	mov	r25, r24
    29d8:	91 70       	andi	r25, 0x01	; 1
    29da:	84 e1       	ldi	r24, 0x14	; 20
    29dc:	69 2f       	mov	r22, r25
    29de:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    29e2:	89 ad       	ldd	r24, Y+57	; 0x39
    29e4:	86 95       	lsr	r24
    29e6:	98 2f       	mov	r25, r24
    29e8:	91 70       	andi	r25, 0x01	; 1
    29ea:	85 e1       	ldi	r24, 0x15	; 21
    29ec:	69 2f       	mov	r22, r25
    29ee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    29f2:	89 ad       	ldd	r24, Y+57	; 0x39
    29f4:	86 95       	lsr	r24
    29f6:	86 95       	lsr	r24
    29f8:	98 2f       	mov	r25, r24
    29fa:	91 70       	andi	r25, 0x01	; 1
    29fc:	86 e1       	ldi	r24, 0x16	; 22
    29fe:	69 2f       	mov	r22, r25
    2a00:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    2a04:	89 ad       	ldd	r24, Y+57	; 0x39
    2a06:	86 95       	lsr	r24
    2a08:	86 95       	lsr	r24
    2a0a:	86 95       	lsr	r24
    2a0c:	98 2f       	mov	r25, r24
    2a0e:	91 70       	andi	r25, 0x01	; 1
    2a10:	88 e1       	ldi	r24, 0x18	; 24
    2a12:	69 2f       	mov	r22, r25
    2a14:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2a18:	8c e0       	ldi	r24, 0x0C	; 12
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 e8       	ldi	r26, 0x80	; 128
    2a26:	bf e3       	ldi	r27, 0x3F	; 63
    2a28:	89 8f       	std	Y+25, r24	; 0x19
    2a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	69 8d       	ldd	r22, Y+25	; 0x19
    2a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a e7       	ldi	r20, 0x7A	; 122
    2a3e:	55 e4       	ldi	r21, 0x45	; 69
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8d 8b       	std	Y+21, r24	; 0x15
    2a4a:	9e 8b       	std	Y+22, r25	; 0x16
    2a4c:	af 8b       	std	Y+23, r26	; 0x17
    2a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    2a72:	6d 89       	ldd	r22, Y+21	; 0x15
    2a74:	7e 89       	ldd	r23, Y+22	; 0x16
    2a76:	8f 89       	ldd	r24, Y+23	; 0x17
    2a78:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <H_Lcd_Void_LCDWriteCharacter+0x342>
    2ab4:	80 e9       	ldi	r24, 0x90	; 144
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	9a 8b       	std	Y+18, r25	; 0x12
    2aba:	89 8b       	std	Y+17, r24	; 0x11
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <H_Lcd_Void_LCDWriteCharacter+0x330>
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aca:	9c 89       	ldd	r25, Y+20	; 0x14
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9c 8b       	std	Y+20, r25	; 0x14
    2ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <H_Lcd_Void_LCDWriteCharacter+0x324>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c 8b       	std	Y+20, r25	; 0x14
    2aee:	8b 8b       	std	Y+19, r24	; 0x13
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	98 8b       	std	Y+16, r25	; 0x10
    2af6:	8f 87       	std	Y+15, r24	; 0x0f
    2af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afa:	98 89       	ldd	r25, Y+16	; 0x10
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2b04:	8c e0       	ldi	r24, 0x0C	; 12
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 ea       	ldi	r26, 0xA0	; 160
    2b12:	b0 e4       	ldi	r27, 0x40	; 64
    2b14:	8b 87       	std	Y+11, r24	; 0x0b
    2b16:	9c 87       	std	Y+12, r25	; 0x0c
    2b18:	ad 87       	std	Y+13, r26	; 0x0d
    2b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a e7       	ldi	r20, 0x7A	; 122
    2b2a:	55 e4       	ldi	r21, 0x45	; 69
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8f 83       	std	Y+7, r24	; 0x07
    2b36:	98 87       	std	Y+8, r25	; 0x08
    2b38:	a9 87       	std	Y+9, r26	; 0x09
    2b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3e:	78 85       	ldd	r23, Y+8	; 0x08
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <H_Lcd_Void_LCDWriteCharacter+0x42e>
    2ba0:	80 e9       	ldi	r24, 0x90	; 144
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	9c 83       	std	Y+4, r25	; 0x04
    2ba6:	8b 83       	std	Y+3, r24	; 0x03
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <H_Lcd_Void_LCDWriteCharacter+0x41c>
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <H_Lcd_Void_LCDWriteCharacter+0x410>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9e 83       	std	Y+6, r25	; 0x06
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <H_Lcd_Void_LCDWriteCharacter+0x458>
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2bf0:	e9 96       	adiw	r28, 0x39	; 57
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	08 95       	ret

00002c02 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	e9 97       	sbiw	r28, 0x39	; 57
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    2c18:	8d e0       	ldi	r24, 0x0D	; 13
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2c20:	89 ad       	ldd	r24, Y+57	; 0x39
    2c22:	82 95       	swap	r24
    2c24:	8f 70       	andi	r24, 0x0F	; 15
    2c26:	98 2f       	mov	r25, r24
    2c28:	91 70       	andi	r25, 0x01	; 1
    2c2a:	84 e1       	ldi	r24, 0x14	; 20
    2c2c:	69 2f       	mov	r22, r25
    2c2e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2c32:	89 ad       	ldd	r24, Y+57	; 0x39
    2c34:	82 95       	swap	r24
    2c36:	86 95       	lsr	r24
    2c38:	87 70       	andi	r24, 0x07	; 7
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	91 70       	andi	r25, 0x01	; 1
    2c3e:	85 e1       	ldi	r24, 0x15	; 21
    2c40:	69 2f       	mov	r22, r25
    2c42:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    2c46:	89 ad       	ldd	r24, Y+57	; 0x39
    2c48:	82 95       	swap	r24
    2c4a:	86 95       	lsr	r24
    2c4c:	86 95       	lsr	r24
    2c4e:	83 70       	andi	r24, 0x03	; 3
    2c50:	98 2f       	mov	r25, r24
    2c52:	91 70       	andi	r25, 0x01	; 1
    2c54:	86 e1       	ldi	r24, 0x16	; 22
    2c56:	69 2f       	mov	r22, r25
    2c58:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2c5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2c5e:	98 2f       	mov	r25, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	99 27       	eor	r25, r25
    2c64:	99 1f       	adc	r25, r25
    2c66:	88 e1       	ldi	r24, 0x18	; 24
    2c68:	69 2f       	mov	r22, r25
    2c6a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2c6e:	8c e0       	ldi	r24, 0x0C	; 12
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a0 e8       	ldi	r26, 0x80	; 128
    2c7c:	bf e3       	ldi	r27, 0x3F	; 63
    2c7e:	8d ab       	std	Y+53, r24	; 0x35
    2c80:	9e ab       	std	Y+54, r25	; 0x36
    2c82:	af ab       	std	Y+55, r26	; 0x37
    2c84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c86:	6d a9       	ldd	r22, Y+53	; 0x35
    2c88:	7e a9       	ldd	r23, Y+54	; 0x36
    2c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	55 e4       	ldi	r21, 0x45	; 69
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	89 ab       	std	Y+49, r24	; 0x31
    2ca0:	9a ab       	std	Y+50, r25	; 0x32
    2ca2:	ab ab       	std	Y+51, r26	; 0x33
    2ca4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    2caa:	8b a9       	ldd	r24, Y+51	; 0x33
    2cac:	9c a9       	ldd	r25, Y+52	; 0x34
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	2c f4       	brge	.+10     	; 0x2cc8 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	98 ab       	std	Y+48, r25	; 0x30
    2cc4:	8f a7       	std	Y+47, r24	; 0x2f
    2cc6:	3f c0       	rjmp	.+126    	; 0x2d46 <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    2cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cca:	7a a9       	ldd	r23, Y+50	; 0x32
    2ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cce:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f ef       	ldi	r19, 0xFF	; 255
    2cd4:	4f e7       	ldi	r20, 0x7F	; 127
    2cd6:	57 e4       	ldi	r21, 0x47	; 71
    2cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cdc:	18 16       	cp	r1, r24
    2cde:	4c f5       	brge	.+82     	; 0x2d32 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e2       	ldi	r20, 0x20	; 32
    2cee:	51 e4       	ldi	r21, 0x41	; 65
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	98 ab       	std	Y+48, r25	; 0x30
    2d06:	8f a7       	std	Y+47, r24	; 0x2f
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <H_Lcd_Void_LCDWriteCommand+0x126>
    2d0a:	80 e9       	ldi	r24, 0x90	; 144
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	9e a7       	std	Y+46, r25	; 0x2e
    2d10:	8d a7       	std	Y+45, r24	; 0x2d
    2d12:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d14:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <H_Lcd_Void_LCDWriteCommand+0x114>
    2d1a:	9e a7       	std	Y+46, r25	; 0x2e
    2d1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d20:	98 a9       	ldd	r25, Y+48	; 0x30
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	98 ab       	std	Y+48, r25	; 0x30
    2d26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	69 f7       	brne	.-38     	; 0x2d0a <H_Lcd_Void_LCDWriteCommand+0x108>
    2d30:	14 c0       	rjmp	.+40     	; 0x2d5a <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	69 a9       	ldd	r22, Y+49	; 0x31
    2d34:	7a a9       	ldd	r23, Y+50	; 0x32
    2d36:	8b a9       	ldd	r24, Y+51	; 0x33
    2d38:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	98 ab       	std	Y+48, r25	; 0x30
    2d44:	8f a7       	std	Y+47, r24	; 0x2f
    2d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d48:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4a:	9c a7       	std	Y+44, r25	; 0x2c
    2d4c:	8b a7       	std	Y+43, r24	; 0x2b
    2d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <H_Lcd_Void_LCDWriteCommand+0x150>
    2d56:	9c a7       	std	Y+44, r25	; 0x2c
    2d58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2d5a:	8c e0       	ldi	r24, 0x0C	; 12
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a0 e8       	ldi	r26, 0x80	; 128
    2d68:	bf e3       	ldi	r27, 0x3F	; 63
    2d6a:	8f a3       	std	Y+39, r24	; 0x27
    2d6c:	98 a7       	std	Y+40, r25	; 0x28
    2d6e:	a9 a7       	std	Y+41, r26	; 0x29
    2d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	6f a1       	ldd	r22, Y+39	; 0x27
    2d74:	78 a5       	ldd	r23, Y+40	; 0x28
    2d76:	89 a5       	ldd	r24, Y+41	; 0x29
    2d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a e7       	ldi	r20, 0x7A	; 122
    2d80:	55 e4       	ldi	r21, 0x45	; 69
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8b a3       	std	Y+35, r24	; 0x23
    2d8c:	9c a3       	std	Y+36, r25	; 0x24
    2d8e:	ad a3       	std	Y+37, r26	; 0x25
    2d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d92:	6b a1       	ldd	r22, Y+35	; 0x23
    2d94:	7c a1       	ldd	r23, Y+36	; 0x24
    2d96:	8d a1       	ldd	r24, Y+37	; 0x25
    2d98:	9e a1       	ldd	r25, Y+38	; 0x26
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2db4:	6b a1       	ldd	r22, Y+35	; 0x23
    2db6:	7c a1       	ldd	r23, Y+36	; 0x24
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dce:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9a a3       	std	Y+34, r25	; 0x22
    2df2:	89 a3       	std	Y+33, r24	; 0x21
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <H_Lcd_Void_LCDWriteCommand+0x212>
    2df6:	80 e9       	ldi	r24, 0x90	; 144
    2df8:	91 e0       	ldi	r25, 0x01	; 1
    2dfa:	98 a3       	std	Y+32, r25	; 0x20
    2dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e00:	98 a1       	ldd	r25, Y+32	; 0x20
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <H_Lcd_Void_LCDWriteCommand+0x200>
    2e06:	98 a3       	std	Y+32, r25	; 0x20
    2e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9a a3       	std	Y+34, r25	; 0x22
    2e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	89 a1       	ldd	r24, Y+33	; 0x21
    2e16:	9a a1       	ldd	r25, Y+34	; 0x22
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e20:	7c a1       	ldd	r23, Y+36	; 0x24
    2e22:	8d a1       	ldd	r24, Y+37	; 0x25
    2e24:	9e a1       	ldd	r25, Y+38	; 0x26
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9a a3       	std	Y+34, r25	; 0x22
    2e30:	89 a3       	std	Y+33, r24	; 0x21
    2e32:	89 a1       	ldd	r24, Y+33	; 0x21
    2e34:	9a a1       	ldd	r25, Y+34	; 0x22
    2e36:	9e 8f       	std	Y+30, r25	; 0x1e
    2e38:	8d 8f       	std	Y+29, r24	; 0x1d
    2e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <H_Lcd_Void_LCDWriteCommand+0x23c>
    2e42:	9e 8f       	std	Y+30, r25	; 0x1e
    2e44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    2e46:	89 ad       	ldd	r24, Y+57	; 0x39
    2e48:	98 2f       	mov	r25, r24
    2e4a:	91 70       	andi	r25, 0x01	; 1
    2e4c:	84 e1       	ldi	r24, 0x14	; 20
    2e4e:	69 2f       	mov	r22, r25
    2e50:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2e54:	89 ad       	ldd	r24, Y+57	; 0x39
    2e56:	86 95       	lsr	r24
    2e58:	98 2f       	mov	r25, r24
    2e5a:	91 70       	andi	r25, 0x01	; 1
    2e5c:	85 e1       	ldi	r24, 0x15	; 21
    2e5e:	69 2f       	mov	r22, r25
    2e60:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2e64:	89 ad       	ldd	r24, Y+57	; 0x39
    2e66:	86 95       	lsr	r24
    2e68:	86 95       	lsr	r24
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	91 70       	andi	r25, 0x01	; 1
    2e6e:	86 e1       	ldi	r24, 0x16	; 22
    2e70:	69 2f       	mov	r22, r25
    2e72:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    2e76:	89 ad       	ldd	r24, Y+57	; 0x39
    2e78:	86 95       	lsr	r24
    2e7a:	86 95       	lsr	r24
    2e7c:	86 95       	lsr	r24
    2e7e:	98 2f       	mov	r25, r24
    2e80:	91 70       	andi	r25, 0x01	; 1
    2e82:	88 e1       	ldi	r24, 0x18	; 24
    2e84:	69 2f       	mov	r22, r25
    2e86:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2e8a:	8c e0       	ldi	r24, 0x0C	; 12
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a0 e8       	ldi	r26, 0x80	; 128
    2e98:	bf e3       	ldi	r27, 0x3F	; 63
    2e9a:	89 8f       	std	Y+25, r24	; 0x19
    2e9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2ea0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	4a e7       	ldi	r20, 0x7A	; 122
    2eb0:	55 e4       	ldi	r21, 0x45	; 69
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	8d 8b       	std	Y+21, r24	; 0x15
    2ebc:	9e 8b       	std	Y+22, r25	; 0x16
    2ebe:	af 8b       	std	Y+23, r26	; 0x17
    2ec0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e8       	ldi	r20, 0x80	; 128
    2ed0:	5f e3       	ldi	r21, 0x3F	; 63
    2ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed6:	88 23       	and	r24, r24
    2ed8:	2c f4       	brge	.+10     	; 0x2ee4 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9c 8b       	std	Y+20, r25	; 0x14
    2ee0:	8b 8b       	std	Y+19, r24	; 0x13
    2ee2:	3f c0       	rjmp	.+126    	; 0x2f62 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    2ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eea:	98 8d       	ldd	r25, Y+24	; 0x18
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	3f ef       	ldi	r19, 0xFF	; 255
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	57 e4       	ldi	r21, 0x47	; 71
    2ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	4c f5       	brge	.+82     	; 0x2f4e <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efc:	69 8d       	ldd	r22, Y+25	; 0x19
    2efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9c 8b       	std	Y+20, r25	; 0x14
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	0f c0       	rjmp	.+30     	; 0x2f44 <H_Lcd_Void_LCDWriteCommand+0x342>
    2f26:	80 e9       	ldi	r24, 0x90	; 144
    2f28:	91 e0       	ldi	r25, 0x01	; 1
    2f2a:	9a 8b       	std	Y+18, r25	; 0x12
    2f2c:	89 8b       	std	Y+17, r24	; 0x11
    2f2e:	89 89       	ldd	r24, Y+17	; 0x11
    2f30:	9a 89       	ldd	r25, Y+18	; 0x12
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <H_Lcd_Void_LCDWriteCommand+0x330>
    2f36:	9a 8b       	std	Y+18, r25	; 0x12
    2f38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	9c 8b       	std	Y+20, r25	; 0x14
    2f42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	9c 89       	ldd	r25, Y+20	; 0x14
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	69 f7       	brne	.-38     	; 0x2f26 <H_Lcd_Void_LCDWriteCommand+0x324>
    2f4c:	14 c0       	rjmp	.+40     	; 0x2f76 <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9c 8b       	std	Y+20, r25	; 0x14
    2f60:	8b 8b       	std	Y+19, r24	; 0x13
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	9c 89       	ldd	r25, Y+20	; 0x14
    2f66:	98 8b       	std	Y+16, r25	; 0x10
    2f68:	8f 87       	std	Y+15, r24	; 0x0f
    2f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6c:	98 89       	ldd	r25, Y+16	; 0x10
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <H_Lcd_Void_LCDWriteCommand+0x36c>
    2f72:	98 8b       	std	Y+16, r25	; 0x10
    2f74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2f76:	8c e0       	ldi	r24, 0x0C	; 12
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a0 ea       	ldi	r26, 0xA0	; 160
    2f84:	b0 e4       	ldi	r27, 0x40	; 64
    2f86:	8b 87       	std	Y+11, r24	; 0x0b
    2f88:	9c 87       	std	Y+12, r25	; 0x0c
    2f8a:	ad 87       	std	Y+13, r26	; 0x0d
    2f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a e7       	ldi	r20, 0x7A	; 122
    2f9c:	55 e4       	ldi	r21, 0x45	; 69
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	98 87       	std	Y+8, r25	; 0x08
    2faa:	a9 87       	std	Y+9, r26	; 0x09
    2fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	3f c0       	rjmp	.+126    	; 0x304e <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd2:	78 85       	ldd	r23, Y+8	; 0x08
    2fd4:	89 85       	ldd	r24, Y+9	; 0x09
    2fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	4c f5       	brge	.+82     	; 0x303a <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <H_Lcd_Void_LCDWriteCommand+0x42e>
    3012:	80 e9       	ldi	r24, 0x90	; 144
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <H_Lcd_Void_LCDWriteCommand+0x41c>
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	8d 81       	ldd	r24, Y+5	; 0x05
    3028:	9e 81       	ldd	r25, Y+6	; 0x06
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	69 f7       	brne	.-38     	; 0x3012 <H_Lcd_Void_LCDWriteCommand+0x410>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	9a 81       	ldd	r25, Y+2	; 0x02
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <H_Lcd_Void_LCDWriteCommand+0x458>
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    3062:	e9 96       	adiw	r28, 0x39	; 57
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <H_Lcd_Void_LCDWriteString+0x6>
    307a:	0f 92       	push	r0
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	9b 83       	std	Y+3, r25	; 0x03
    3082:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    3084:	19 82       	std	Y+1, r1	; 0x01
    3086:	0e c0       	rjmp	.+28     	; 0x30a4 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	fc 01       	movw	r30, r24
    3094:	e2 0f       	add	r30, r18
    3096:	f3 1f       	adc	r31, r19
    3098:	80 81       	ld	r24, Z
    309a:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	8f 5f       	subi	r24, 0xFF	; 255
    30a2:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	fc 01       	movw	r30, r24
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	80 81       	ld	r24, Z
    30b6:	88 23       	and	r24, r24
    30b8:	39 f7       	brne	.-50     	; 0x3088 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	2f 97       	sbiw	r28, 0x0f	; 15
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	6c 87       	std	Y+12, r22	; 0x0c
    30f4:	7d 87       	std	Y+13, r23	; 0x0d
    30f6:	8e 87       	std	Y+14, r24	; 0x0e
    30f8:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    30fa:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    30fc:	8a e0       	ldi	r24, 0x0A	; 10
    30fe:	fe 01       	movw	r30, r28
    3100:	32 96       	adiw	r30, 0x02	; 2
    3102:	df 01       	movw	r26, r30
    3104:	98 2f       	mov	r25, r24
    3106:	1d 92       	st	X+, r1
    3108:	9a 95       	dec	r25
    310a:	e9 f7       	brne	.-6      	; 0x3106 <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    310c:	8c 85       	ldd	r24, Y+12	; 0x0c
    310e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3110:	ae 85       	ldd	r26, Y+14	; 0x0e
    3112:	bf 85       	ldd	r27, Y+15	; 0x0f
    3114:	bb 23       	and	r27, r27
    3116:	94 f4       	brge	.+36     	; 0x313c <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    3118:	8c 85       	ldd	r24, Y+12	; 0x0c
    311a:	9d 85       	ldd	r25, Y+13	; 0x0d
    311c:	ae 85       	ldd	r26, Y+14	; 0x0e
    311e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3120:	b0 95       	com	r27
    3122:	a0 95       	com	r26
    3124:	90 95       	com	r25
    3126:	81 95       	neg	r24
    3128:	9f 4f       	sbci	r25, 0xFF	; 255
    312a:	af 4f       	sbci	r26, 0xFF	; 255
    312c:	bf 4f       	sbci	r27, 0xFF	; 255
    312e:	8c 87       	std	Y+12, r24	; 0x0c
    3130:	9d 87       	std	Y+13, r25	; 0x0d
    3132:	ae 87       	std	Y+14, r26	; 0x0e
    3134:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    3136:	8d e2       	ldi	r24, 0x2D	; 45
    3138:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	08 2f       	mov	r16, r24
    3140:	11 27       	eor	r17, r17
    3142:	07 fd       	sbrc	r16, 7
    3144:	10 95       	com	r17
    3146:	8c 85       	ldd	r24, Y+12	; 0x0c
    3148:	9d 85       	ldd	r25, Y+13	; 0x0d
    314a:	ae 85       	ldd	r26, Y+14	; 0x0e
    314c:	bf 85       	ldd	r27, Y+15	; 0x0f
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	28 2f       	mov	r18, r24
    3164:	ce 01       	movw	r24, r28
    3166:	02 96       	adiw	r24, 0x02	; 2
    3168:	fc 01       	movw	r30, r24
    316a:	e0 0f       	add	r30, r16
    316c:	f1 1f       	adc	r31, r17
    316e:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    3170:	8c 85       	ldd	r24, Y+12	; 0x0c
    3172:	9d 85       	ldd	r25, Y+13	; 0x0d
    3174:	ae 85       	ldd	r26, Y+14	; 0x0e
    3176:	bf 85       	ldd	r27, Y+15	; 0x0f
    3178:	2a e0       	ldi	r18, 0x0A	; 10
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
    3188:	da 01       	movw	r26, r20
    318a:	c9 01       	movw	r24, r18
    318c:	8c 87       	std	Y+12, r24	; 0x0c
    318e:	9d 87       	std	Y+13, r25	; 0x0d
    3190:	ae 87       	std	Y+14, r26	; 0x0e
    3192:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	8f 5f       	subi	r24, 0xFF	; 255
    3198:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    319a:	8c 85       	ldd	r24, Y+12	; 0x0c
    319c:	9d 85       	ldd	r25, Y+13	; 0x0d
    319e:	ae 85       	ldd	r26, Y+14	; 0x0e
    31a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	a1 05       	cpc	r26, r1
    31a6:	b1 05       	cpc	r27, r1
    31a8:	49 f6       	brne	.-110    	; 0x313c <H_Lcd_Void_LCDWriteNumber+0x62>
    31aa:	11 c0       	rjmp	.+34     	; 0x31ce <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	81 50       	subi	r24, 0x01	; 1
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	28 2f       	mov	r18, r24
    31b6:	33 27       	eor	r19, r19
    31b8:	27 fd       	sbrc	r18, 7
    31ba:	30 95       	com	r19
    31bc:	ce 01       	movw	r24, r28
    31be:	02 96       	adiw	r24, 0x02	; 2
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	80 81       	ld	r24, Z
    31c8:	80 5d       	subi	r24, 0xD0	; 208
    31ca:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	18 16       	cp	r1, r24
    31d2:	64 f3       	brlt	.-40     	; 0x31ac <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    31d4:	2f 96       	adiw	r28, 0x0f	; 15
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	08 95       	ret

000031ea <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <H_Lcd_Void_LCDGoTo+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <H_Lcd_Void_LCDGoTo+0x8>
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <H_Lcd_Void_LCDGoTo+0xa>
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    31fc:	80 e8       	ldi	r24, 0x80	; 128
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	80 ec       	ldi	r24, 0xC0	; 192
    3202:	8a 83       	std	Y+2, r24	; 0x02
    3204:	84 e9       	ldi	r24, 0x94	; 148
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	84 ed       	ldi	r24, 0xD4	; 212
    320a:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	28 2f       	mov	r18, r24
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	ce 01       	movw	r24, r28
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	fc 01       	movw	r30, r24
    3218:	e2 0f       	add	r30, r18
    321a:	f3 1f       	adc	r31, r19
    321c:	90 81       	ld	r25, Z
    321e:	8e 81       	ldd	r24, Y+6	; 0x06
    3220:	89 0f       	add	r24, r25
    3222:	0e 94 01 16 	call	0x2c02	; 0x2c02 <H_Lcd_Void_LCDWriteCommand>
}
    3226:	26 96       	adiw	r28, 0x06	; 6
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <H_void_KEYPAD_Init>:
#include "Keypad_Private.h"
#include "Keypad_Config.h"
u8 KEY_u8_COLPINs[] = COL_PINS;

void H_void_KEYPAD_Init(void)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	0f 92       	push	r0
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
	//single Row
	u8 Local_u8_COLIterator;
	for(Local_u8_COLIterator=0 ;Local_u8_COLIterator<COL_N ;Local_u8_COLIterator++)
    3242:	19 82       	std	Y+1, r1	; 0x01
    3244:	0d c0       	rjmp	.+26     	; 0x3260 <H_void_KEYPAD_Init+0x28>
	{
		M_DIO_Void_SetPinDirection(KEY_u8_COLPINs[Local_u8_COLIterator],INPUT);
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	88 2f       	mov	r24, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	fc 01       	movw	r30, r24
    324e:	e7 5f       	subi	r30, 0xF7	; 247
    3250:	fd 4f       	sbci	r31, 0xFD	; 253
    3252:	80 81       	ld	r24, Z
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>

void H_void_KEYPAD_Init(void)
{
	//single Row
	u8 Local_u8_COLIterator;
	for(Local_u8_COLIterator=0 ;Local_u8_COLIterator<COL_N ;Local_u8_COLIterator++)
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	84 30       	cpi	r24, 0x04	; 4
    3264:	80 f3       	brcs	.-32     	; 0x3246 <H_void_KEYPAD_Init+0xe>
	{
		M_DIO_Void_SetPinDirection(KEY_u8_COLPINs[Local_u8_COLIterator],INPUT);
		//M_DIO_Void_SetPinDirection(PD7_PIN,INPUT);
	}
	//
}
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <H_u8_KEYPAD_GetPressedKey>:
u8 H_u8_KEYPAD_GetPressedKey(u8* Copy_u8_PressedKey)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <H_u8_KEYPAD_GetPressedKey+0x6>
    3274:	0f 92       	push	r0
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01

}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    3292:	84 e2       	ldi	r24, 0x24	; 36
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	0e 94 9a 09 	call	0x1334	; 0x1334 <M_DIO_Void_SetPinDirection>
}
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    32a8:	84 e2       	ldi	r24, 0x24	; 36
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
}
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    32be:	84 e2       	ldi	r24, 0x24	; 36
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
}
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
    32d4:	84 e2       	ldi	r24, 0x24	; 36
    32d6:	0e 94 4d 0c 	call	0x189a	; 0x189a <M_DIO_Void_TogPin>
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	2e 97       	sbiw	r28, 0x0e	; 14
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    32f4:	84 e2       	ldi	r24, 0x24	; 36
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	a0 ea       	ldi	r26, 0xA0	; 160
    3302:	b2 e4       	ldi	r27, 0x42	; 66
    3304:	8b 87       	std	Y+11, r24	; 0x0b
    3306:	9c 87       	std	Y+12, r25	; 0x0c
    3308:	ad 87       	std	Y+13, r26	; 0x0d
    330a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330c:	6b 85       	ldd	r22, Y+11	; 0x0b
    330e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3310:	8d 85       	ldd	r24, Y+13	; 0x0d
    3312:	9e 85       	ldd	r25, Y+14	; 0x0e
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	4a e7       	ldi	r20, 0x7A	; 122
    331a:	55 e4       	ldi	r21, 0x45	; 69
    331c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	8f 83       	std	Y+7, r24	; 0x07
    3326:	98 87       	std	Y+8, r25	; 0x08
    3328:	a9 87       	std	Y+9, r26	; 0x09
    332a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    332c:	6f 81       	ldd	r22, Y+7	; 0x07
    332e:	78 85       	ldd	r23, Y+8	; 0x08
    3330:	89 85       	ldd	r24, Y+9	; 0x09
    3332:	9a 85       	ldd	r25, Y+10	; 0x0a
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e8       	ldi	r20, 0x80	; 128
    333a:	5f e3       	ldi	r21, 0x3F	; 63
    333c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3340:	88 23       	and	r24, r24
    3342:	2c f4       	brge	.+10     	; 0x334e <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	3f c0       	rjmp	.+126    	; 0x33cc <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	3f ef       	ldi	r19, 0xFF	; 255
    335a:	4f e7       	ldi	r20, 0x7F	; 127
    335c:	57 e4       	ldi	r21, 0x47	; 71
    335e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3362:	18 16       	cp	r1, r24
    3364:	4c f5       	brge	.+82     	; 0x33b8 <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3366:	6b 85       	ldd	r22, Y+11	; 0x0b
    3368:	7c 85       	ldd	r23, Y+12	; 0x0c
    336a:	8d 85       	ldd	r24, Y+13	; 0x0d
    336c:	9e 85       	ldd	r25, Y+14	; 0x0e
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e2       	ldi	r20, 0x20	; 32
    3374:	51 e4       	ldi	r21, 0x41	; 65
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	bc 01       	movw	r22, r24
    3380:	cd 01       	movw	r24, r26
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9e 83       	std	Y+6, r25	; 0x06
    338c:	8d 83       	std	Y+5, r24	; 0x05
    338e:	0f c0       	rjmp	.+30     	; 0x33ae <H_Buzzer_Void_BuzzerOnce+0xce>
    3390:	80 e9       	ldi	r24, 0x90	; 144
    3392:	91 e0       	ldi	r25, 0x01	; 1
    3394:	9c 83       	std	Y+4, r25	; 0x04
    3396:	8b 83       	std	Y+3, r24	; 0x03
    3398:	8b 81       	ldd	r24, Y+3	; 0x03
    339a:	9c 81       	ldd	r25, Y+4	; 0x04
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <H_Buzzer_Void_BuzzerOnce+0xbc>
    33a0:	9c 83       	std	Y+4, r25	; 0x04
    33a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a4:	8d 81       	ldd	r24, Y+5	; 0x05
    33a6:	9e 81       	ldd	r25, Y+6	; 0x06
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	8d 81       	ldd	r24, Y+5	; 0x05
    33b0:	9e 81       	ldd	r25, Y+6	; 0x06
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	69 f7       	brne	.-38     	; 0x3390 <H_Buzzer_Void_BuzzerOnce+0xb0>
    33b6:	14 c0       	rjmp	.+40     	; 0x33e0 <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ba:	78 85       	ldd	r23, Y+8	; 0x08
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	9e 83       	std	Y+6, r25	; 0x06
    33ca:	8d 83       	std	Y+5, r24	; 0x05
    33cc:	8d 81       	ldd	r24, Y+5	; 0x05
    33ce:	9e 81       	ldd	r25, Y+6	; 0x06
    33d0:	9a 83       	std	Y+2, r25	; 0x02
    33d2:	89 83       	std	Y+1, r24	; 0x01
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	9a 81       	ldd	r25, Y+2	; 0x02
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <H_Buzzer_Void_BuzzerOnce+0xf8>
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    33e0:	84 e2       	ldi	r24, 0x24	; 36
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
}
    33e8:	2e 96       	adiw	r28, 0x0e	; 14
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	aa 97       	sbiw	r28, 0x2a	; 42
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    340e:	84 e2       	ldi	r24, 0x24	; 36
    3410:	61 e0       	ldi	r22, 0x01	; 1
    3412:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a0 ea       	ldi	r26, 0xA0	; 160
    341c:	b2 e4       	ldi	r27, 0x42	; 66
    341e:	8f a3       	std	Y+39, r24	; 0x27
    3420:	98 a7       	std	Y+40, r25	; 0x28
    3422:	a9 a7       	std	Y+41, r26	; 0x29
    3424:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	6f a1       	ldd	r22, Y+39	; 0x27
    3428:	78 a5       	ldd	r23, Y+40	; 0x28
    342a:	89 a5       	ldd	r24, Y+41	; 0x29
    342c:	9a a5       	ldd	r25, Y+42	; 0x2a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a e7       	ldi	r20, 0x7A	; 122
    3434:	55 e4       	ldi	r21, 0x45	; 69
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	8b a3       	std	Y+35, r24	; 0x23
    3440:	9c a3       	std	Y+36, r25	; 0x24
    3442:	ad a3       	std	Y+37, r26	; 0x25
    3444:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3446:	6b a1       	ldd	r22, Y+35	; 0x23
    3448:	7c a1       	ldd	r23, Y+36	; 0x24
    344a:	8d a1       	ldd	r24, Y+37	; 0x25
    344c:	9e a1       	ldd	r25, Y+38	; 0x26
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e8       	ldi	r20, 0x80	; 128
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    345a:	88 23       	and	r24, r24
    345c:	2c f4       	brge	.+10     	; 0x3468 <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9a a3       	std	Y+34, r25	; 0x22
    3464:	89 a3       	std	Y+33, r24	; 0x21
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
    3468:	6b a1       	ldd	r22, Y+35	; 0x23
    346a:	7c a1       	ldd	r23, Y+36	; 0x24
    346c:	8d a1       	ldd	r24, Y+37	; 0x25
    346e:	9e a1       	ldd	r25, Y+38	; 0x26
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	4f e7       	ldi	r20, 0x7F	; 127
    3476:	57 e4       	ldi	r21, 0x47	; 71
    3478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347c:	18 16       	cp	r1, r24
    347e:	4c f5       	brge	.+82     	; 0x34d2 <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3480:	6f a1       	ldd	r22, Y+39	; 0x27
    3482:	78 a5       	ldd	r23, Y+40	; 0x28
    3484:	89 a5       	ldd	r24, Y+41	; 0x29
    3486:	9a a5       	ldd	r25, Y+42	; 0x2a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9a a3       	std	Y+34, r25	; 0x22
    34a6:	89 a3       	std	Y+33, r24	; 0x21
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <H_Buzzer_Void_BuzzerTwice+0xce>
    34aa:	80 e9       	ldi	r24, 0x90	; 144
    34ac:	91 e0       	ldi	r25, 0x01	; 1
    34ae:	98 a3       	std	Y+32, r25	; 0x20
    34b0:	8f 8f       	std	Y+31, r24	; 0x1f
    34b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b4:	98 a1       	ldd	r25, Y+32	; 0x20
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <H_Buzzer_Void_BuzzerTwice+0xbc>
    34ba:	98 a3       	std	Y+32, r25	; 0x20
    34bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	89 a1       	ldd	r24, Y+33	; 0x21
    34c0:	9a a1       	ldd	r25, Y+34	; 0x22
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9a a3       	std	Y+34, r25	; 0x22
    34c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	89 a1       	ldd	r24, Y+33	; 0x21
    34ca:	9a a1       	ldd	r25, Y+34	; 0x22
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	69 f7       	brne	.-38     	; 0x34aa <H_Buzzer_Void_BuzzerTwice+0xb0>
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	6b a1       	ldd	r22, Y+35	; 0x23
    34d4:	7c a1       	ldd	r23, Y+36	; 0x24
    34d6:	8d a1       	ldd	r24, Y+37	; 0x25
    34d8:	9e a1       	ldd	r25, Y+38	; 0x26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9a a3       	std	Y+34, r25	; 0x22
    34e4:	89 a3       	std	Y+33, r24	; 0x21
    34e6:	89 a1       	ldd	r24, Y+33	; 0x21
    34e8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ea:	9e 8f       	std	Y+30, r25	; 0x1e
    34ec:	8d 8f       	std	Y+29, r24	; 0x1d
    34ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <H_Buzzer_Void_BuzzerTwice+0xf8>
    34f6:	9e 8f       	std	Y+30, r25	; 0x1e
    34f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    34fa:	84 e2       	ldi	r24, 0x24	; 36
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	a0 e7       	ldi	r26, 0x70	; 112
    3508:	b2 e4       	ldi	r27, 0x42	; 66
    350a:	89 8f       	std	Y+25, r24	; 0x19
    350c:	9a 8f       	std	Y+26, r25	; 0x1a
    350e:	ab 8f       	std	Y+27, r26	; 0x1b
    3510:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3512:	69 8d       	ldd	r22, Y+25	; 0x19
    3514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a e7       	ldi	r20, 0x7A	; 122
    3520:	55 e4       	ldi	r21, 0x45	; 69
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8d 8b       	std	Y+21, r24	; 0x15
    352c:	9e 8b       	std	Y+22, r25	; 0x16
    352e:	af 8b       	std	Y+23, r26	; 0x17
    3530:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3532:	6d 89       	ldd	r22, Y+21	; 0x15
    3534:	7e 89       	ldd	r23, Y+22	; 0x16
    3536:	8f 89       	ldd	r24, Y+23	; 0x17
    3538:	98 8d       	ldd	r25, Y+24	; 0x18
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9c 8b       	std	Y+20, r25	; 0x14
    3550:	8b 8b       	std	Y+19, r24	; 0x13
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
    3554:	6d 89       	ldd	r22, Y+21	; 0x15
    3556:	7e 89       	ldd	r23, Y+22	; 0x16
    3558:	8f 89       	ldd	r24, Y+23	; 0x17
    355a:	98 8d       	ldd	r25, Y+24	; 0x18
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	57 e4       	ldi	r21, 0x47	; 71
    3564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3568:	18 16       	cp	r1, r24
    356a:	4c f5       	brge	.+82     	; 0x35be <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356c:	69 8d       	ldd	r22, Y+25	; 0x19
    356e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e2       	ldi	r20, 0x20	; 32
    357a:	51 e4       	ldi	r21, 0x41	; 65
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9c 8b       	std	Y+20, r25	; 0x14
    3592:	8b 8b       	std	Y+19, r24	; 0x13
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <H_Buzzer_Void_BuzzerTwice+0x1ba>
    3596:	80 e9       	ldi	r24, 0x90	; 144
    3598:	91 e0       	ldi	r25, 0x01	; 1
    359a:	9a 8b       	std	Y+18, r25	; 0x12
    359c:	89 8b       	std	Y+17, r24	; 0x11
    359e:	89 89       	ldd	r24, Y+17	; 0x11
    35a0:	9a 89       	ldd	r25, Y+18	; 0x12
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <H_Buzzer_Void_BuzzerTwice+0x1a8>
    35a6:	9a 8b       	std	Y+18, r25	; 0x12
    35a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	8b 89       	ldd	r24, Y+19	; 0x13
    35ac:	9c 89       	ldd	r25, Y+20	; 0x14
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	9c 8b       	std	Y+20, r25	; 0x14
    35b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b4:	8b 89       	ldd	r24, Y+19	; 0x13
    35b6:	9c 89       	ldd	r25, Y+20	; 0x14
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	69 f7       	brne	.-38     	; 0x3596 <H_Buzzer_Void_BuzzerTwice+0x19c>
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35be:	6d 89       	ldd	r22, Y+21	; 0x15
    35c0:	7e 89       	ldd	r23, Y+22	; 0x16
    35c2:	8f 89       	ldd	r24, Y+23	; 0x17
    35c4:	98 8d       	ldd	r25, Y+24	; 0x18
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	8b 89       	ldd	r24, Y+19	; 0x13
    35d4:	9c 89       	ldd	r25, Y+20	; 0x14
    35d6:	98 8b       	std	Y+16, r25	; 0x10
    35d8:	8f 87       	std	Y+15, r24	; 0x0f
    35da:	8f 85       	ldd	r24, Y+15	; 0x0f
    35dc:	98 89       	ldd	r25, Y+16	; 0x10
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <H_Buzzer_Void_BuzzerTwice+0x1e4>
    35e2:	98 8b       	std	Y+16, r25	; 0x10
    35e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    35e6:	84 e2       	ldi	r24, 0x24	; 36
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a0 ea       	ldi	r26, 0xA0	; 160
    35f4:	b2 e4       	ldi	r27, 0x42	; 66
    35f6:	8b 87       	std	Y+11, r24	; 0x0b
    35f8:	9c 87       	std	Y+12, r25	; 0x0c
    35fa:	ad 87       	std	Y+13, r26	; 0x0d
    35fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3600:	7c 85       	ldd	r23, Y+12	; 0x0c
    3602:	8d 85       	ldd	r24, Y+13	; 0x0d
    3604:	9e 85       	ldd	r25, Y+14	; 0x0e
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	4a e7       	ldi	r20, 0x7A	; 122
    360c:	55 e4       	ldi	r21, 0x45	; 69
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	8f 83       	std	Y+7, r24	; 0x07
    3618:	98 87       	std	Y+8, r25	; 0x08
    361a:	a9 87       	std	Y+9, r26	; 0x09
    361c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    361e:	6f 81       	ldd	r22, Y+7	; 0x07
    3620:	78 85       	ldd	r23, Y+8	; 0x08
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	9a 85       	ldd	r25, Y+10	; 0x0a
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e8       	ldi	r20, 0x80	; 128
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3632:	88 23       	and	r24, r24
    3634:	2c f4       	brge	.+10     	; 0x3640 <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
    363e:	3f c0       	rjmp	.+126    	; 0x36be <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    3640:	6f 81       	ldd	r22, Y+7	; 0x07
    3642:	78 85       	ldd	r23, Y+8	; 0x08
    3644:	89 85       	ldd	r24, Y+9	; 0x09
    3646:	9a 85       	ldd	r25, Y+10	; 0x0a
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	3f ef       	ldi	r19, 0xFF	; 255
    364c:	4f e7       	ldi	r20, 0x7F	; 127
    364e:	57 e4       	ldi	r21, 0x47	; 71
    3650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3654:	18 16       	cp	r1, r24
    3656:	4c f5       	brge	.+82     	; 0x36aa <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3658:	6b 85       	ldd	r22, Y+11	; 0x0b
    365a:	7c 85       	ldd	r23, Y+12	; 0x0c
    365c:	8d 85       	ldd	r24, Y+13	; 0x0d
    365e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e2       	ldi	r20, 0x20	; 32
    3666:	51 e4       	ldi	r21, 0x41	; 65
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	bc 01       	movw	r22, r24
    3672:	cd 01       	movw	r24, r26
    3674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	9e 83       	std	Y+6, r25	; 0x06
    367e:	8d 83       	std	Y+5, r24	; 0x05
    3680:	0f c0       	rjmp	.+30     	; 0x36a0 <H_Buzzer_Void_BuzzerTwice+0x2a6>
    3682:	80 e9       	ldi	r24, 0x90	; 144
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	9c 83       	std	Y+4, r25	; 0x04
    3688:	8b 83       	std	Y+3, r24	; 0x03
    368a:	8b 81       	ldd	r24, Y+3	; 0x03
    368c:	9c 81       	ldd	r25, Y+4	; 0x04
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <H_Buzzer_Void_BuzzerTwice+0x294>
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3696:	8d 81       	ldd	r24, Y+5	; 0x05
    3698:	9e 81       	ldd	r25, Y+6	; 0x06
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	69 f7       	brne	.-38     	; 0x3682 <H_Buzzer_Void_BuzzerTwice+0x288>
    36a8:	14 c0       	rjmp	.+40     	; 0x36d2 <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36aa:	6f 81       	ldd	r22, Y+7	; 0x07
    36ac:	78 85       	ldd	r23, Y+8	; 0x08
    36ae:	89 85       	ldd	r24, Y+9	; 0x09
    36b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <H_Buzzer_Void_BuzzerTwice+0x2d0>
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    36d2:	84 e2       	ldi	r24, 0x24	; 36
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <M_DIO_Void_SetPinValue>
}
    36da:	aa 96       	adiw	r28, 0x2a	; 42
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <APP_void_TimeCounter>:
/*
 GLOBAL VARIABLE that is timer of seconds during app runtime
 */
 static u16 APP_u16_TimesSEC =0;
void APP_void_TimeCounter()
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
	APP_u16_TimesSEC++;
    36f4:	80 91 1b 02 	lds	r24, 0x021B
    36f8:	90 91 1c 02 	lds	r25, 0x021C
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	90 93 1c 02 	sts	0x021C, r25
    3702:	80 93 1b 02 	sts	0x021B, r24

}
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <APP_void_TimeDisplay>:

// This Function for display time at first line
void APP_void_TimeDisplay(u16 Copy_u8_TimeSEC)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <APP_void_TimeDisplay+0x6>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <APP_void_TimeDisplay+0x8>
    3714:	0f 92       	push	r0
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	9d 83       	std	Y+5, r25	; 0x05
    371c:	8c 83       	std	Y+4, r24	; 0x04
	// the seconds count from 0 to 59 until reach 60 second  minute counter is plus
	u8 Local_u8_Seconds = Copy_u8_TimeSEC %60;
    371e:	8c 81       	ldd	r24, Y+4	; 0x04
    3720:	9d 81       	ldd	r25, Y+5	; 0x05
    3722:	2c e3       	ldi	r18, 0x3C	; 60
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	b9 01       	movw	r22, r18
    3728:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodhi4>
    372c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Minutes = (Copy_u8_TimeSEC/60)%60;
    372e:	8c 81       	ldd	r24, Y+4	; 0x04
    3730:	9d 81       	ldd	r25, Y+5	; 0x05
    3732:	2c e3       	ldi	r18, 0x3C	; 60
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	b9 01       	movw	r22, r18
    3738:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodhi4>
    373c:	cb 01       	movw	r24, r22
    373e:	2c e3       	ldi	r18, 0x3C	; 60
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	b9 01       	movw	r22, r18
    3744:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodhi4>
    3748:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Hour = (Copy_u8_TimeSEC/60)/60;
    374a:	8c 81       	ldd	r24, Y+4	; 0x04
    374c:	9d 81       	ldd	r25, Y+5	; 0x05
    374e:	20 e1       	ldi	r18, 0x10	; 16
    3750:	3e e0       	ldi	r19, 0x0E	; 14
    3752:	b9 01       	movw	r22, r18
    3754:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodhi4>
    3758:	cb 01       	movw	r24, r22
    375a:	89 83       	std	Y+1, r24	; 0x01

	H_Lcd_Void_LCDGoTo(0,6);
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	66 e0       	ldi	r22, 0x06	; 6
    3760:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
	if(Local_u8_Hour)
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	88 23       	and	r24, r24
    3768:	d1 f0       	breq	.+52     	; 0x379e <APP_void_TimeDisplay+0x92>
	{
		if(!(Local_u8_Hour/10)) //If number contain 1 digit print 0 then number
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	8a 30       	cpi	r24, 0x0A	; 10
    376e:	68 f4       	brcc	.+26     	; 0x378a <APP_void_TimeDisplay+0x7e>
		{

			H_Lcd_Void_LCDWriteCharacter('0');
    3770:	80 e3       	ldi	r24, 0x30	; 48
    3772:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Lcd_Void_LCDWriteNumber(Local_u8_Hour);
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a0 e0       	ldi	r26, 0x00	; 0
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    3788:	0e c0       	rjmp	.+28     	; 0x37a6 <APP_void_TimeDisplay+0x9a>
		}
		else H_Lcd_Void_LCDWriteNumber(Local_u8_Hour);
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	a0 e0       	ldi	r26, 0x00	; 0
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    379c:	04 c0       	rjmp	.+8      	; 0x37a6 <APP_void_TimeDisplay+0x9a>
	}
	else H_Lcd_Void_LCDWriteString("00"); // To zeros counter
    379e:	80 e6       	ldi	r24, 0x60	; 96
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteCharacter(':');
    37a6:	8a e3       	ldi	r24, 0x3A	; 58
    37a8:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>

	if(Local_u8_Minutes)
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	88 23       	and	r24, r24
    37b0:	d1 f0       	breq	.+52     	; 0x37e6 <APP_void_TimeDisplay+0xda>
	{
		if(!(Local_u8_Minutes/10))
    37b2:	8a 81       	ldd	r24, Y+2	; 0x02
    37b4:	8a 30       	cpi	r24, 0x0A	; 10
    37b6:	68 f4       	brcc	.+26     	; 0x37d2 <APP_void_TimeDisplay+0xc6>
		{

			H_Lcd_Void_LCDWriteCharacter('0');
    37b8:	80 e3       	ldi	r24, 0x30	; 48
    37ba:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Lcd_Void_LCDWriteNumber(Local_u8_Minutes);
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a0 e0       	ldi	r26, 0x00	; 0
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	bc 01       	movw	r22, r24
    37ca:	cd 01       	movw	r24, r26
    37cc:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    37d0:	0e c0       	rjmp	.+28     	; 0x37ee <APP_void_TimeDisplay+0xe2>
		}
		else H_Lcd_Void_LCDWriteNumber(Local_u8_Minutes);
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	88 2f       	mov	r24, r24
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 e0       	ldi	r26, 0x00	; 0
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <APP_void_TimeDisplay+0xe2>
	}
	else H_Lcd_Void_LCDWriteString("00");
    37e6:	80 e6       	ldi	r24, 0x60	; 96
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteCharacter(':');
    37ee:	8a e3       	ldi	r24, 0x3A	; 58
    37f0:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>

	if(Local_u8_Seconds)
    37f4:	8b 81       	ldd	r24, Y+3	; 0x03
    37f6:	88 23       	and	r24, r24
    37f8:	d1 f0       	breq	.+52     	; 0x382e <APP_void_TimeDisplay+0x122>
	{
		if(!(Local_u8_Seconds/10))
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	8a 30       	cpi	r24, 0x0A	; 10
    37fe:	68 f4       	brcc	.+26     	; 0x381a <APP_void_TimeDisplay+0x10e>
		{

			H_Lcd_Void_LCDWriteCharacter('0');
    3800:	80 e3       	ldi	r24, 0x30	; 48
    3802:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Lcd_Void_LCDWriteNumber(Local_u8_Seconds);
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	88 2f       	mov	r24, r24
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	bc 01       	movw	r22, r24
    3812:	cd 01       	movw	r24, r26
    3814:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    3818:	0e c0       	rjmp	.+28     	; 0x3836 <APP_void_TimeDisplay+0x12a>
		}
		else H_Lcd_Void_LCDWriteNumber(Local_u8_Seconds);
    381a:	8b 81       	ldd	r24, Y+3	; 0x03
    381c:	88 2f       	mov	r24, r24
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	a0 e0       	ldi	r26, 0x00	; 0
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <APP_void_TimeDisplay+0x12a>
	}
	else H_Lcd_Void_LCDWriteString("00");
    382e:	80 e6       	ldi	r24, 0x60	; 96
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
}
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <APP_void_PrintQuestion>:

/*
 * Function to print Question number and choices
 */
void APP_void_PrintQuestion(u8 Copy_u8_QNO)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	0f 92       	push	r0
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	89 83       	std	Y+1, r24	; 0x01
	H_Lcd_Void_LCDGoTo(1,2);
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	62 e0       	ldi	r22, 0x02	; 2
    3856:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Q-");
    385a:	83 e6       	ldi	r24, 0x63	; 99
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
	if(Copy_u8_QNO/10)
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	8a 30       	cpi	r24, 0x0A	; 10
    3866:	50 f0       	brcs	.+20     	; 0x387c <APP_void_PrintQuestion+0x36>
	{
		H_Lcd_Void_LCDWriteNumber(Copy_u8_QNO);
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 e0       	ldi	r26, 0x00	; 0
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
    387a:	0c c0       	rjmp	.+24     	; 0x3894 <APP_void_PrintQuestion+0x4e>
	}
	else{
		H_Lcd_Void_LCDWriteCharacter('0');
    387c:	80 e3       	ldi	r24, 0x30	; 48
    387e:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteNumber(Copy_u8_QNO);
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a0 e0       	ldi	r26, 0x00	; 0
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Lcd_Void_LCDWriteNumber>
	}
	H_Lcd_Void_LCDWriteString("    A B C D");
    3894:	86 e6       	ldi	r24, 0x66	; 102
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>

}
    389c:	0f 90       	pop	r0
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <APP_u8_AnsCheck>:
u8 APP_u8_AnsCheck(u8 Copy_u8_Ans)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	2b 97       	sbiw	r28, 0x0b	; 11
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	8b 87       	std	Y+11, r24	; 0x0b
	//Assume that no pushbutton not pressed
	u8 Local_u8_Result = NOT_PRESSED;
    38ba:	8f ef       	ldi	r24, 0xFF	; 255
    38bc:	8a 83       	std	Y+2, r24	; 0x02
	//Sorting pushbuttons in array be able to be looped
	u8 Local_u8_Au8_Buttons[]={PUSH_BUTTON_0,PUSH_BUTTON_1,PUSH_BUTTON_2,PUSH_BUTTON_3};
    38be:	1b 82       	std	Y+3, r1	; 0x03
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	8c 83       	std	Y+4, r24	; 0x04
    38c4:	82 e0       	ldi	r24, 0x02	; 2
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	83 e0       	ldi	r24, 0x03	; 3
    38ca:	8e 83       	std	Y+6, r24	; 0x06
	//Sorting Answers according to pushbuttons
		u8 Local_u8_Au8_BUTValue[]={'A','B','C','D'};
    38cc:	81 e4       	ldi	r24, 0x41	; 65
    38ce:	8f 83       	std	Y+7, r24	; 0x07
    38d0:	82 e4       	ldi	r24, 0x42	; 66
    38d2:	88 87       	std	Y+8, r24	; 0x08
    38d4:	83 e4       	ldi	r24, 0x43	; 67
    38d6:	89 87       	std	Y+9, r24	; 0x09
    38d8:	84 e4       	ldi	r24, 0x44	; 68
    38da:	8a 87       	std	Y+10, r24	; 0x0a
		//loop to check the right answer
	for(u8 i= 0;i<4;i++)
    38dc:	19 82       	std	Y+1, r1	; 0x01
    38de:	5b c0       	rjmp	.+182    	; 0x3996 <APP_u8_AnsCheck+0xf2>
		if(H_PushButton_U8_PushButtonRead(Local_u8_Au8_Buttons[i])==LOW)
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	ce 01       	movw	r24, r28
    38e8:	03 96       	adiw	r24, 0x03	; 3
    38ea:	fc 01       	movw	r30, r24
    38ec:	e2 0f       	add	r30, r18
    38ee:	f3 1f       	adc	r31, r19
    38f0:	80 81       	ld	r24, Z
    38f2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <H_PushButton_U8_PushButtonRead>
    38f6:	88 23       	and	r24, r24
    38f8:	09 f0       	breq	.+2      	; 0x38fc <APP_u8_AnsCheck+0x58>
    38fa:	4a c0       	rjmp	.+148    	; 0x3990 <APP_u8_AnsCheck+0xec>
		{	if(Copy_u8_Ans == Local_u8_Au8_BUTValue[i])
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	ce 01       	movw	r24, r28
    3904:	07 96       	adiw	r24, 0x07	; 7
    3906:	fc 01       	movw	r30, r24
    3908:	e2 0f       	add	r30, r18
    390a:	f3 1f       	adc	r31, r19
    390c:	90 81       	ld	r25, Z
    390e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3910:	98 17       	cp	r25, r24
    3912:	61 f4       	brne	.+24     	; 0x392c <APP_u8_AnsCheck+0x88>
		{
				Local_u8_Result = TRUE;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	8a 83       	std	Y+2, r24	; 0x02
				H_LED_Void_LedInit(LED_GRN);
    3918:	83 e0       	ldi	r24, 0x03	; 3
    391a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <H_LED_Void_LedInit>
				 H_LED_Void_LedOn(LED_GRN);
    391e:	83 e0       	ldi	r24, 0x03	; 3
    3920:	0e 94 b9 10 	call	0x2172	; 0x2172 <H_LED_Void_LedOn>
				 H_LED_Void_LedOff(LED_RED);
    3924:	84 e0       	ldi	r24, 0x04	; 4
    3926:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <H_LED_Void_LedOff>
    392a:	0a c0       	rjmp	.+20     	; 0x3940 <APP_u8_AnsCheck+0x9c>
		}
			else
				{Local_u8_Result = FALSE;
    392c:	1a 82       	std	Y+2, r1	; 0x02
				H_LED_Void_LedInit(LED_RED);
    392e:	84 e0       	ldi	r24, 0x04	; 4
    3930:	0e 94 79 10 	call	0x20f2	; 0x20f2 <H_LED_Void_LedInit>
			 H_LED_Void_LedOn(LED_RED);
    3934:	84 e0       	ldi	r24, 0x04	; 4
    3936:	0e 94 b9 10 	call	0x2172	; 0x2172 <H_LED_Void_LedOn>
			 H_LED_Void_LedOff(LED_GRN);
    393a:	83 e0       	ldi	r24, 0x03	; 3
    393c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <H_LED_Void_LedOff>
				}
			/*
			 * Next code to select  answer by printing brackets around it
			 */
			H_Lcd_Void_LCDGoTo(1,2*(Local_u8_Au8_BUTValue[i]-'A')+9);
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	ce 01       	movw	r24, r28
    3948:	07 96       	adiw	r24, 0x07	; 7
    394a:	fc 01       	movw	r30, r24
    394c:	e2 0f       	add	r30, r18
    394e:	f3 1f       	adc	r31, r19
    3950:	80 81       	ld	r24, Z
    3952:	88 2f       	mov	r24, r24
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	81 54       	subi	r24, 0x41	; 65
    3958:	90 40       	sbci	r25, 0x00	; 0
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	98 2f       	mov	r25, r24
    3960:	97 5f       	subi	r25, 0xF7	; 247
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	69 2f       	mov	r22, r25
    3966:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteCharacter('[');
    396a:	8b e5       	ldi	r24, 0x5B	; 91
    396c:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Lcd_Void_LCDWriteCharacter(Local_u8_Au8_BUTValue[i]);
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	28 2f       	mov	r18, r24
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	ce 01       	movw	r24, r28
    3978:	07 96       	adiw	r24, 0x07	; 7
    397a:	fc 01       	movw	r30, r24
    397c:	e2 0f       	add	r30, r18
    397e:	f3 1f       	adc	r31, r19
    3980:	80 81       	ld	r24, Z
    3982:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Lcd_Void_LCDWriteCharacter(']');
    3986:	8d e5       	ldi	r24, 0x5D	; 93
    3988:	0e 94 c8 13 	call	0x2790	; 0x2790 <H_Lcd_Void_LCDWriteCharacter>
			H_Buzzer_Void_BuzzerOnce();
    398c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <H_Buzzer_Void_BuzzerOnce>
	//Sorting pushbuttons in array be able to be looped
	u8 Local_u8_Au8_Buttons[]={PUSH_BUTTON_0,PUSH_BUTTON_1,PUSH_BUTTON_2,PUSH_BUTTON_3};
	//Sorting Answers according to pushbuttons
		u8 Local_u8_Au8_BUTValue[]={'A','B','C','D'};
		//loop to check the right answer
	for(u8 i= 0;i<4;i++)
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	89 83       	std	Y+1, r24	; 0x01
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	84 30       	cpi	r24, 0x04	; 4
    399a:	08 f4       	brcc	.+2      	; 0x399e <APP_u8_AnsCheck+0xfa>
    399c:	a1 cf       	rjmp	.-190    	; 0x38e0 <APP_u8_AnsCheck+0x3c>
			H_Lcd_Void_LCDWriteCharacter(Local_u8_Au8_BUTValue[i]);
			H_Lcd_Void_LCDWriteCharacter(']');
			H_Buzzer_Void_BuzzerOnce();
		}

	return Local_u8_Result;
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39a0:	2b 96       	adiw	r28, 0x0b	; 11
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	cf 91       	pop	r28
    39ae:	df 91       	pop	r29
    39b0:	08 95       	ret

000039b2 <main>:


int main()
{
    39b2:	df 93       	push	r29
    39b4:	cf 93       	push	r28
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
    39ba:	ce 55       	subi	r28, 0x5E	; 94
    39bc:	d0 40       	sbci	r29, 0x00	; 0
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
	H_Buzzer_Void_BuzzerInit();
    39c8:	0e 94 45 19 	call	0x328a	; 0x328a <H_Buzzer_Void_BuzzerInit>
	H_Buzzer_Void_BuzzerOnce();
    39cc:	0e 94 70 19 	call	0x32e0	; 0x32e0 <H_Buzzer_Void_BuzzerOnce>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a8 ec       	ldi	r26, 0xC8	; 200
    39d6:	b2 e4       	ldi	r27, 0x42	; 66
    39d8:	8d ab       	std	Y+53, r24	; 0x35
    39da:	9e ab       	std	Y+54, r25	; 0x36
    39dc:	af ab       	std	Y+55, r26	; 0x37
    39de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e0:	6d a9       	ldd	r22, Y+53	; 0x35
    39e2:	7e a9       	ldd	r23, Y+54	; 0x36
    39e4:	8f a9       	ldd	r24, Y+55	; 0x37
    39e6:	98 ad       	ldd	r25, Y+56	; 0x38
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4a e7       	ldi	r20, 0x7A	; 122
    39ee:	55 e4       	ldi	r21, 0x45	; 69
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	89 ab       	std	Y+49, r24	; 0x31
    39fa:	9a ab       	std	Y+50, r25	; 0x32
    39fc:	ab ab       	std	Y+51, r26	; 0x33
    39fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a00:	69 a9       	ldd	r22, Y+49	; 0x31
    3a02:	7a a9       	ldd	r23, Y+50	; 0x32
    3a04:	8b a9       	ldd	r24, Y+51	; 0x33
    3a06:	9c a9       	ldd	r25, Y+52	; 0x34
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e8       	ldi	r20, 0x80	; 128
    3a0e:	5f e3       	ldi	r21, 0x3F	; 63
    3a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	2c f4       	brge	.+10     	; 0x3a22 <main+0x70>
		__ticks = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	98 ab       	std	Y+48, r25	; 0x30
    3a1e:	8f a7       	std	Y+47, r24	; 0x2f
    3a20:	3f c0       	rjmp	.+126    	; 0x3aa0 <main+0xee>
	else if (__tmp > 65535)
    3a22:	69 a9       	ldd	r22, Y+49	; 0x31
    3a24:	7a a9       	ldd	r23, Y+50	; 0x32
    3a26:	8b a9       	ldd	r24, Y+51	; 0x33
    3a28:	9c a9       	ldd	r25, Y+52	; 0x34
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	4c f5       	brge	.+82     	; 0x3a8c <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a3c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a3e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a40:	98 ad       	ldd	r25, Y+56	; 0x38
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e2       	ldi	r20, 0x20	; 32
    3a48:	51 e4       	ldi	r21, 0x41	; 65
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	98 ab       	std	Y+48, r25	; 0x30
    3a60:	8f a7       	std	Y+47, r24	; 0x2f
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <main+0xd0>
    3a64:	80 e9       	ldi	r24, 0x90	; 144
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	9e a7       	std	Y+46, r25	; 0x2e
    3a6a:	8d a7       	std	Y+45, r24	; 0x2d
    3a6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <main+0xbe>
    3a74:	9e a7       	std	Y+46, r25	; 0x2e
    3a76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	98 ab       	std	Y+48, r25	; 0x30
    3a80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a84:	98 a9       	ldd	r25, Y+48	; 0x30
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <main+0xb2>
    3a8a:	14 c0       	rjmp	.+40     	; 0x3ab4 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a90:	8b a9       	ldd	r24, Y+51	; 0x33
    3a92:	9c a9       	ldd	r25, Y+52	; 0x34
    3a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	98 ab       	std	Y+48, r25	; 0x30
    3a9e:	8f a7       	std	Y+47, r24	; 0x2f
    3aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa4:	9c a7       	std	Y+44, r25	; 0x2c
    3aa6:	8b a7       	std	Y+43, r24	; 0x2b
    3aa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <main+0xfa>
    3ab0:	9c a7       	std	Y+44, r25	; 0x2c
    3ab2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	H_Buzzer_Void_BuzzerOnce();
    3ab4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <H_Buzzer_Void_BuzzerOnce>
	H_Lcd_Void_LCDInit();
    3ab8:	0e 94 97 13 	call	0x272e	; 0x272e <H_Lcd_Void_LCDInit>

	M_Timer_Void_TimerInit();
    3abc:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_Timer_Void_TimerInit>
	//This function send the address of timer counter function to the Timer_0 overflow Interrupt
	M_Timer_Void_SetCallBack(APP_void_TimeCounter);
    3ac0:	86 e7       	ldi	r24, 0x76	; 118
    3ac2:	9b e1       	ldi	r25, 0x1B	; 27
    3ac4:	0e 94 09 09 	call	0x1212	; 0x1212 <M_Timer_Void_SetCallBack>
	//Set System Tick by  1 Second
	M_Timer_Void_TimerSetTime(1000);
    3ac8:	68 ee       	ldi	r22, 0xE8	; 232
    3aca:	73 e0       	ldi	r23, 0x03	; 3
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 33 07 	call	0xe66	; 0xe66 <M_Timer_Void_TimerSetTime>

	M_Timer_Void_TimerStart(TIMER0_CHANNEL);
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <M_Timer_Void_TimerStart>
	M_GIE_Void_GlobalInterruptEnable();
    3ada:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_GIE_Void_GlobalInterruptEnable>

	u8 Local_u8_QNumber=1;
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	8a af       	std	Y+58, r24	; 0x3a
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_0);
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_1);
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_2);
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_3);
    3af4:	83 e0       	ldi	r24, 0x03	; 3
    3af6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <H_PushButton_Void_PushButtonInit>
	//This array of correct answers
	u8 Local_Au8_CorrectAnss[]=ANSES;
    3afa:	ce 01       	movw	r24, r28
    3afc:	cb 96       	adiw	r24, 0x3b	; 59
    3afe:	6c 96       	adiw	r28, 0x1c	; 28
    3b00:	9f af       	std	Y+63, r25	; 0x3f
    3b02:	8e af       	std	Y+62, r24	; 0x3e
    3b04:	6c 97       	sbiw	r28, 0x1c	; 28
    3b06:	e2 ee       	ldi	r30, 0xE2	; 226
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	6e 96       	adiw	r28, 0x1e	; 30
    3b0c:	ff af       	std	Y+63, r31	; 0x3f
    3b0e:	ee af       	std	Y+62, r30	; 0x3e
    3b10:	6e 97       	sbiw	r28, 0x1e	; 30
    3b12:	ff e1       	ldi	r31, 0x1F	; 31
    3b14:	6f 96       	adiw	r28, 0x1f	; 31
    3b16:	ff af       	std	Y+63, r31	; 0x3f
    3b18:	6f 97       	sbiw	r28, 0x1f	; 31
    3b1a:	6e 96       	adiw	r28, 0x1e	; 30
    3b1c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b20:	6e 97       	sbiw	r28, 0x1e	; 30
    3b22:	00 80       	ld	r0, Z
    3b24:	6e 96       	adiw	r28, 0x1e	; 30
    3b26:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b28:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b2a:	6e 97       	sbiw	r28, 0x1e	; 30
    3b2c:	01 96       	adiw	r24, 0x01	; 1
    3b2e:	6e 96       	adiw	r28, 0x1e	; 30
    3b30:	9f af       	std	Y+63, r25	; 0x3f
    3b32:	8e af       	std	Y+62, r24	; 0x3e
    3b34:	6e 97       	sbiw	r28, 0x1e	; 30
    3b36:	6c 96       	adiw	r28, 0x1c	; 28
    3b38:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b3c:	6c 97       	sbiw	r28, 0x1c	; 28
    3b3e:	00 82       	st	Z, r0
    3b40:	6c 96       	adiw	r28, 0x1c	; 28
    3b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b46:	6c 97       	sbiw	r28, 0x1c	; 28
    3b48:	01 96       	adiw	r24, 0x01	; 1
    3b4a:	6c 96       	adiw	r28, 0x1c	; 28
    3b4c:	9f af       	std	Y+63, r25	; 0x3f
    3b4e:	8e af       	std	Y+62, r24	; 0x3e
    3b50:	6c 97       	sbiw	r28, 0x1c	; 28
    3b52:	6f 96       	adiw	r28, 0x1f	; 31
    3b54:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b56:	6f 97       	sbiw	r28, 0x1f	; 31
    3b58:	91 50       	subi	r25, 0x01	; 1
    3b5a:	6f 96       	adiw	r28, 0x1f	; 31
    3b5c:	9f af       	std	Y+63, r25	; 0x3f
    3b5e:	6f 97       	sbiw	r28, 0x1f	; 31
    3b60:	6f 96       	adiw	r28, 0x1f	; 31
    3b62:	ef ad       	ldd	r30, Y+63	; 0x3f
    3b64:	6f 97       	sbiw	r28, 0x1f	; 31
    3b66:	ee 23       	and	r30, r30
    3b68:	c1 f6       	brne	.-80     	; 0x3b1a <main+0x168>
	while(1)
	{
			APP_void_TimeDisplay(APP_u16_TimesSEC);
    3b6a:	80 91 1b 02 	lds	r24, 0x021B
    3b6e:	90 91 1c 02 	lds	r25, 0x021C
    3b72:	0e 94 86 1b 	call	0x370c	; 0x370c <APP_void_TimeDisplay>



		APP_void_PrintQuestion(Local_u8_QNumber);
    3b76:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b78:	0e 94 23 1c 	call	0x3846	; 0x3846 <APP_void_PrintQuestion>
		u8 Local_u8_Result = APP_u8_AnsCheck(Local_Au8_CorrectAnss[Local_u8_QNumber-1]);
    3b7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b7e:	88 2f       	mov	r24, r24
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9c 01       	movw	r18, r24
    3b84:	21 50       	subi	r18, 0x01	; 1
    3b86:	30 40       	sbci	r19, 0x00	; 0
    3b88:	ce 01       	movw	r24, r28
    3b8a:	cb 96       	adiw	r24, 0x3b	; 59
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	e2 0f       	add	r30, r18
    3b90:	f3 1f       	adc	r31, r19
    3b92:	80 81       	ld	r24, Z
    3b94:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <APP_u8_AnsCheck>
    3b98:	89 af       	std	Y+57, r24	; 0x39
		//If right answer print -> GREAT <-
		if(Local_u8_Result!=NOT_PRESSED)
    3b9a:	89 ad       	ldd	r24, Y+57	; 0x39
    3b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <main+0x1f0>
    3ba0:	87 c1       	rjmp	.+782    	; 0x3eb0 <main+0x4fe>
		{

			if(Local_u8_Result==TRUE)
    3ba2:	89 ad       	ldd	r24, Y+57	; 0x39
    3ba4:	81 30       	cpi	r24, 0x01	; 1
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <main+0x1f8>
    3ba8:	7e c0       	rjmp	.+252    	; 0x3ca6 <main+0x2f4>
			{
				H_Lcd_Void_LCDGoTo(1,0);
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("      -> GREAT <-     ");
    3bb2:	82 e7       	ldi	r24, 0x72	; 114
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	aa e7       	ldi	r26, 0x7A	; 122
    3bc0:	b4 e4       	ldi	r27, 0x44	; 68
    3bc2:	8f a3       	std	Y+39, r24	; 0x27
    3bc4:	98 a7       	std	Y+40, r25	; 0x28
    3bc6:	a9 a7       	std	Y+41, r26	; 0x29
    3bc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bca:	6f a1       	ldd	r22, Y+39	; 0x27
    3bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    3bce:	89 a5       	ldd	r24, Y+41	; 0x29
    3bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	4a e7       	ldi	r20, 0x7A	; 122
    3bd8:	55 e4       	ldi	r21, 0x45	; 69
    3bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	8b a3       	std	Y+35, r24	; 0x23
    3be4:	9c a3       	std	Y+36, r25	; 0x24
    3be6:	ad a3       	std	Y+37, r26	; 0x25
    3be8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bea:	6b a1       	ldd	r22, Y+35	; 0x23
    3bec:	7c a1       	ldd	r23, Y+36	; 0x24
    3bee:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	40 e8       	ldi	r20, 0x80	; 128
    3bf8:	5f e3       	ldi	r21, 0x3F	; 63
    3bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bfe:	88 23       	and	r24, r24
    3c00:	2c f4       	brge	.+10     	; 0x3c0c <main+0x25a>
		__ticks = 1;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	9a a3       	std	Y+34, r25	; 0x22
    3c08:	89 a3       	std	Y+33, r24	; 0x21
    3c0a:	3f c0       	rjmp	.+126    	; 0x3c8a <main+0x2d8>
	else if (__tmp > 65535)
    3c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c10:	8d a1       	ldd	r24, Y+37	; 0x25
    3c12:	9e a1       	ldd	r25, Y+38	; 0x26
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	3f ef       	ldi	r19, 0xFF	; 255
    3c18:	4f e7       	ldi	r20, 0x7F	; 127
    3c1a:	57 e4       	ldi	r21, 0x47	; 71
    3c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c20:	18 16       	cp	r1, r24
    3c22:	4c f5       	brge	.+82     	; 0x3c76 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	6f a1       	ldd	r22, Y+39	; 0x27
    3c26:	78 a5       	ldd	r23, Y+40	; 0x28
    3c28:	89 a5       	ldd	r24, Y+41	; 0x29
    3c2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e2       	ldi	r20, 0x20	; 32
    3c32:	51 e4       	ldi	r21, 0x41	; 65
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	cd 01       	movw	r24, r26
    3c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	9a a3       	std	Y+34, r25	; 0x22
    3c4a:	89 a3       	std	Y+33, r24	; 0x21
    3c4c:	0f c0       	rjmp	.+30     	; 0x3c6c <main+0x2ba>
    3c4e:	80 e9       	ldi	r24, 0x90	; 144
    3c50:	91 e0       	ldi	r25, 0x01	; 1
    3c52:	98 a3       	std	Y+32, r25	; 0x20
    3c54:	8f 8f       	std	Y+31, r24	; 0x1f
    3c56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c58:	98 a1       	ldd	r25, Y+32	; 0x20
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <main+0x2a8>
    3c5e:	98 a3       	std	Y+32, r25	; 0x20
    3c60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c62:	89 a1       	ldd	r24, Y+33	; 0x21
    3c64:	9a a1       	ldd	r25, Y+34	; 0x22
    3c66:	01 97       	sbiw	r24, 0x01	; 1
    3c68:	9a a3       	std	Y+34, r25	; 0x22
    3c6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	69 f7       	brne	.-38     	; 0x3c4e <main+0x29c>
    3c74:	14 c0       	rjmp	.+40     	; 0x3c9e <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c76:	6b a1       	ldd	r22, Y+35	; 0x23
    3c78:	7c a1       	ldd	r23, Y+36	; 0x24
    3c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9a a3       	std	Y+34, r25	; 0x22
    3c88:	89 a3       	std	Y+33, r24	; 0x21
    3c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3c90:	8d 8f       	std	Y+29, r24	; 0x1d
    3c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	f1 f7       	brne	.-4      	; 0x3c96 <main+0x2e4>
    3c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c9c:	8d 8f       	std	Y+29, r24	; 0x1d
				//H_Lcd_Void_LCDWriteCharacter('D');
				_delay_ms(1000);
				//if answer correct go to next question
				Local_u8_QNumber++;
    3c9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ca0:	8f 5f       	subi	r24, 0xFF	; 255
    3ca2:	8a af       	std	Y+58, r24	; 0x3a
    3ca4:	05 c1       	rjmp	.+522    	; 0x3eb0 <main+0x4fe>
			}
			else
			{
				//IF WRONG ANSWER INCREMENT COUNTER BY 60 TO INCREMENT MINUTES BY 1
				APP_u16_TimesSEC+=60;
    3ca6:	80 91 1b 02 	lds	r24, 0x021B
    3caa:	90 91 1c 02 	lds	r25, 0x021C
    3cae:	cc 96       	adiw	r24, 0x3c	; 60
    3cb0:	90 93 1c 02 	sts	0x021C, r25
    3cb4:	80 93 1b 02 	sts	0x021B, r24
				H_Lcd_Void_LCDGoTo(1,0);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	60 e0       	ldi	r22, 0x00	; 0
    3cbc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("  1 MINUTE BENALIY");
    3cc0:	89 e8       	ldi	r24, 0x89	; 137
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
				//H_Lcd_Void_LCDWriteCharacter('D');
				H_Lcd_Void_LCDGoTo(1,0);
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	aa e7       	ldi	r26, 0x7A	; 122
    3cd6:	b4 e4       	ldi	r27, 0x44	; 68
    3cd8:	89 8f       	std	Y+25, r24	; 0x19
    3cda:	9a 8f       	std	Y+26, r25	; 0x1a
    3cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    3cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a e7       	ldi	r20, 0x7A	; 122
    3cee:	55 e4       	ldi	r21, 0x45	; 69
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	8d 8b       	std	Y+21, r24	; 0x15
    3cfa:	9e 8b       	std	Y+22, r25	; 0x16
    3cfc:	af 8b       	std	Y+23, r26	; 0x17
    3cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d00:	6d 89       	ldd	r22, Y+21	; 0x15
    3d02:	7e 89       	ldd	r23, Y+22	; 0x16
    3d04:	8f 89       	ldd	r24, Y+23	; 0x17
    3d06:	98 8d       	ldd	r25, Y+24	; 0x18
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	2c f4       	brge	.+10     	; 0x3d22 <main+0x370>
		__ticks = 1;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 8b       	std	Y+20, r25	; 0x14
    3d1e:	8b 8b       	std	Y+19, r24	; 0x13
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <main+0x3ee>
	else if (__tmp > 65535)
    3d22:	6d 89       	ldd	r22, Y+21	; 0x15
    3d24:	7e 89       	ldd	r23, Y+22	; 0x16
    3d26:	8f 89       	ldd	r24, Y+23	; 0x17
    3d28:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	4c f5       	brge	.+82     	; 0x3d8c <main+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	9c 8b       	std	Y+20, r25	; 0x14
    3d60:	8b 8b       	std	Y+19, r24	; 0x13
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <main+0x3d0>
    3d64:	80 e9       	ldi	r24, 0x90	; 144
    3d66:	91 e0       	ldi	r25, 0x01	; 1
    3d68:	9a 8b       	std	Y+18, r25	; 0x12
    3d6a:	89 8b       	std	Y+17, r24	; 0x11
    3d6c:	89 89       	ldd	r24, Y+17	; 0x11
    3d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <main+0x3be>
    3d74:	9a 8b       	std	Y+18, r25	; 0x12
    3d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	9c 8b       	std	Y+20, r25	; 0x14
    3d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	8b 89       	ldd	r24, Y+19	; 0x13
    3d84:	9c 89       	ldd	r25, Y+20	; 0x14
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <main+0x3b2>
    3d8a:	14 c0       	rjmp	.+40     	; 0x3db4 <main+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d90:	8f 89       	ldd	r24, Y+23	; 0x17
    3d92:	98 8d       	ldd	r25, Y+24	; 0x18
    3d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	9c 8b       	std	Y+20, r25	; 0x14
    3d9e:	8b 8b       	std	Y+19, r24	; 0x13
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	9c 89       	ldd	r25, Y+20	; 0x14
    3da4:	98 8b       	std	Y+16, r25	; 0x10
    3da6:	8f 87       	std	Y+15, r24	; 0x0f
    3da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3daa:	98 89       	ldd	r25, Y+16	; 0x10
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <main+0x3fa>
    3db0:	98 8b       	std	Y+16, r25	; 0x10
    3db2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				H_Lcd_Void_LCDWriteString("        LOSER        ");
    3db4:	8c e9       	ldi	r24, 0x9C	; 156
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	aa e7       	ldi	r26, 0x7A	; 122
    3dc2:	b4 e4       	ldi	r27, 0x44	; 68
    3dc4:	8b 87       	std	Y+11, r24	; 0x0b
    3dc6:	9c 87       	std	Y+12, r25	; 0x0c
    3dc8:	ad 87       	std	Y+13, r26	; 0x0d
    3dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4a e7       	ldi	r20, 0x7A	; 122
    3dda:	55 e4       	ldi	r21, 0x45	; 69
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	8f 83       	std	Y+7, r24	; 0x07
    3de6:	98 87       	std	Y+8, r25	; 0x08
    3de8:	a9 87       	std	Y+9, r26	; 0x09
    3dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dec:	6f 81       	ldd	r22, Y+7	; 0x07
    3dee:	78 85       	ldd	r23, Y+8	; 0x08
    3df0:	89 85       	ldd	r24, Y+9	; 0x09
    3df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e8       	ldi	r20, 0x80	; 128
    3dfa:	5f e3       	ldi	r21, 0x3F	; 63
    3dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e00:	88 23       	and	r24, r24
    3e02:	2c f4       	brge	.+10     	; 0x3e0e <main+0x45c>
		__ticks = 1;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	9e 83       	std	Y+6, r25	; 0x06
    3e0a:	8d 83       	std	Y+5, r24	; 0x05
    3e0c:	3f c0       	rjmp	.+126    	; 0x3e8c <main+0x4da>
	else if (__tmp > 65535)
    3e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e10:	78 85       	ldd	r23, Y+8	; 0x08
    3e12:	89 85       	ldd	r24, Y+9	; 0x09
    3e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	3f ef       	ldi	r19, 0xFF	; 255
    3e1a:	4f e7       	ldi	r20, 0x7F	; 127
    3e1c:	57 e4       	ldi	r21, 0x47	; 71
    3e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e22:	18 16       	cp	r1, r24
    3e24:	4c f5       	brge	.+82     	; 0x3e78 <main+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e2       	ldi	r20, 0x20	; 32
    3e34:	51 e4       	ldi	r21, 0x41	; 65
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	9e 83       	std	Y+6, r25	; 0x06
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
    3e4e:	0f c0       	rjmp	.+30     	; 0x3e6e <main+0x4bc>
    3e50:	80 e9       	ldi	r24, 0x90	; 144
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	9c 83       	std	Y+4, r25	; 0x04
    3e56:	8b 83       	std	Y+3, r24	; 0x03
    3e58:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <main+0x4aa>
    3e60:	9c 83       	std	Y+4, r25	; 0x04
    3e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	9e 81       	ldd	r25, Y+6	; 0x06
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	69 f7       	brne	.-38     	; 0x3e50 <main+0x49e>
    3e76:	14 c0       	rjmp	.+40     	; 0x3ea0 <main+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e78:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7a:	78 85       	ldd	r23, Y+8	; 0x08
    3e7c:	89 85       	ldd	r24, Y+9	; 0x09
    3e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e90:	9a 83       	std	Y+2, r25	; 0x02
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <main+0x4e6>
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				H_Lcd_Void_LCDGoTo(1,0);
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("                      ");
    3ea8:	82 eb       	ldi	r24, 0xB2	; 178
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>
			}//H_Lcd_Void_LCDWriteCharacter('f');
		}
		if(Local_u8_QNumber==QUES_NOMBERS+1)
    3eb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3eb2:	8f 31       	cpi	r24, 0x1F	; 31
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <main+0x506>
    3eb6:	59 ce       	rjmp	.-846    	; 0x3b6a <main+0x1b8>
			break;

	}
	H_Lcd_Void_LCDGoTo(1,0);
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("   Congratulations      ");
    3ec0:	89 ec       	ldi	r24, 0xC9	; 201
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 94 3a 18 	call	0x3074	; 0x3074 <H_Lcd_Void_LCDWriteString>

	return 0;
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
}
    3ecc:	c2 5a       	subi	r28, 0xA2	; 162
    3ece:	df 4f       	sbci	r29, 0xFF	; 255
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <__mulsi3>:
    3ee0:	62 9f       	mul	r22, r18
    3ee2:	d0 01       	movw	r26, r0
    3ee4:	73 9f       	mul	r23, r19
    3ee6:	f0 01       	movw	r30, r0
    3ee8:	82 9f       	mul	r24, r18
    3eea:	e0 0d       	add	r30, r0
    3eec:	f1 1d       	adc	r31, r1
    3eee:	64 9f       	mul	r22, r20
    3ef0:	e0 0d       	add	r30, r0
    3ef2:	f1 1d       	adc	r31, r1
    3ef4:	92 9f       	mul	r25, r18
    3ef6:	f0 0d       	add	r31, r0
    3ef8:	83 9f       	mul	r24, r19
    3efa:	f0 0d       	add	r31, r0
    3efc:	74 9f       	mul	r23, r20
    3efe:	f0 0d       	add	r31, r0
    3f00:	65 9f       	mul	r22, r21
    3f02:	f0 0d       	add	r31, r0
    3f04:	99 27       	eor	r25, r25
    3f06:	72 9f       	mul	r23, r18
    3f08:	b0 0d       	add	r27, r0
    3f0a:	e1 1d       	adc	r30, r1
    3f0c:	f9 1f       	adc	r31, r25
    3f0e:	63 9f       	mul	r22, r19
    3f10:	b0 0d       	add	r27, r0
    3f12:	e1 1d       	adc	r30, r1
    3f14:	f9 1f       	adc	r31, r25
    3f16:	bd 01       	movw	r22, r26
    3f18:	cf 01       	movw	r24, r30
    3f1a:	11 24       	eor	r1, r1
    3f1c:	08 95       	ret

00003f1e <__udivmodqi4>:
    3f1e:	99 1b       	sub	r25, r25
    3f20:	79 e0       	ldi	r23, 0x09	; 9
    3f22:	04 c0       	rjmp	.+8      	; 0x3f2c <__udivmodqi4_ep>

00003f24 <__udivmodqi4_loop>:
    3f24:	99 1f       	adc	r25, r25
    3f26:	96 17       	cp	r25, r22
    3f28:	08 f0       	brcs	.+2      	; 0x3f2c <__udivmodqi4_ep>
    3f2a:	96 1b       	sub	r25, r22

00003f2c <__udivmodqi4_ep>:
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	7a 95       	dec	r23
    3f30:	c9 f7       	brne	.-14     	; 0x3f24 <__udivmodqi4_loop>
    3f32:	80 95       	com	r24
    3f34:	08 95       	ret

00003f36 <__udivmodhi4>:
    3f36:	aa 1b       	sub	r26, r26
    3f38:	bb 1b       	sub	r27, r27
    3f3a:	51 e1       	ldi	r21, 0x11	; 17
    3f3c:	07 c0       	rjmp	.+14     	; 0x3f4c <__udivmodhi4_ep>

00003f3e <__udivmodhi4_loop>:
    3f3e:	aa 1f       	adc	r26, r26
    3f40:	bb 1f       	adc	r27, r27
    3f42:	a6 17       	cp	r26, r22
    3f44:	b7 07       	cpc	r27, r23
    3f46:	10 f0       	brcs	.+4      	; 0x3f4c <__udivmodhi4_ep>
    3f48:	a6 1b       	sub	r26, r22
    3f4a:	b7 0b       	sbc	r27, r23

00003f4c <__udivmodhi4_ep>:
    3f4c:	88 1f       	adc	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	5a 95       	dec	r21
    3f52:	a9 f7       	brne	.-22     	; 0x3f3e <__udivmodhi4_loop>
    3f54:	80 95       	com	r24
    3f56:	90 95       	com	r25
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	08 95       	ret

00003f5e <__udivmodsi4>:
    3f5e:	a1 e2       	ldi	r26, 0x21	; 33
    3f60:	1a 2e       	mov	r1, r26
    3f62:	aa 1b       	sub	r26, r26
    3f64:	bb 1b       	sub	r27, r27
    3f66:	fd 01       	movw	r30, r26
    3f68:	0d c0       	rjmp	.+26     	; 0x3f84 <__udivmodsi4_ep>

00003f6a <__udivmodsi4_loop>:
    3f6a:	aa 1f       	adc	r26, r26
    3f6c:	bb 1f       	adc	r27, r27
    3f6e:	ee 1f       	adc	r30, r30
    3f70:	ff 1f       	adc	r31, r31
    3f72:	a2 17       	cp	r26, r18
    3f74:	b3 07       	cpc	r27, r19
    3f76:	e4 07       	cpc	r30, r20
    3f78:	f5 07       	cpc	r31, r21
    3f7a:	20 f0       	brcs	.+8      	; 0x3f84 <__udivmodsi4_ep>
    3f7c:	a2 1b       	sub	r26, r18
    3f7e:	b3 0b       	sbc	r27, r19
    3f80:	e4 0b       	sbc	r30, r20
    3f82:	f5 0b       	sbc	r31, r21

00003f84 <__udivmodsi4_ep>:
    3f84:	66 1f       	adc	r22, r22
    3f86:	77 1f       	adc	r23, r23
    3f88:	88 1f       	adc	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	1a 94       	dec	r1
    3f8e:	69 f7       	brne	.-38     	; 0x3f6a <__udivmodsi4_loop>
    3f90:	60 95       	com	r22
    3f92:	70 95       	com	r23
    3f94:	80 95       	com	r24
    3f96:	90 95       	com	r25
    3f98:	9b 01       	movw	r18, r22
    3f9a:	ac 01       	movw	r20, r24
    3f9c:	bd 01       	movw	r22, r26
    3f9e:	cf 01       	movw	r24, r30
    3fa0:	08 95       	ret

00003fa2 <__divmodsi4>:
    3fa2:	97 fb       	bst	r25, 7
    3fa4:	09 2e       	mov	r0, r25
    3fa6:	05 26       	eor	r0, r21
    3fa8:	0e d0       	rcall	.+28     	; 0x3fc6 <__divmodsi4_neg1>
    3faa:	57 fd       	sbrc	r21, 7
    3fac:	04 d0       	rcall	.+8      	; 0x3fb6 <__divmodsi4_neg2>
    3fae:	d7 df       	rcall	.-82     	; 0x3f5e <__udivmodsi4>
    3fb0:	0a d0       	rcall	.+20     	; 0x3fc6 <__divmodsi4_neg1>
    3fb2:	00 1c       	adc	r0, r0
    3fb4:	38 f4       	brcc	.+14     	; 0x3fc4 <__divmodsi4_exit>

00003fb6 <__divmodsi4_neg2>:
    3fb6:	50 95       	com	r21
    3fb8:	40 95       	com	r20
    3fba:	30 95       	com	r19
    3fbc:	21 95       	neg	r18
    3fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc0:	4f 4f       	sbci	r20, 0xFF	; 255
    3fc2:	5f 4f       	sbci	r21, 0xFF	; 255

00003fc4 <__divmodsi4_exit>:
    3fc4:	08 95       	ret

00003fc6 <__divmodsi4_neg1>:
    3fc6:	f6 f7       	brtc	.-4      	; 0x3fc4 <__divmodsi4_exit>
    3fc8:	90 95       	com	r25
    3fca:	80 95       	com	r24
    3fcc:	70 95       	com	r23
    3fce:	61 95       	neg	r22
    3fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd6:	08 95       	ret

00003fd8 <__prologue_saves__>:
    3fd8:	2f 92       	push	r2
    3fda:	3f 92       	push	r3
    3fdc:	4f 92       	push	r4
    3fde:	5f 92       	push	r5
    3fe0:	6f 92       	push	r6
    3fe2:	7f 92       	push	r7
    3fe4:	8f 92       	push	r8
    3fe6:	9f 92       	push	r9
    3fe8:	af 92       	push	r10
    3fea:	bf 92       	push	r11
    3fec:	cf 92       	push	r12
    3fee:	df 92       	push	r13
    3ff0:	ef 92       	push	r14
    3ff2:	ff 92       	push	r15
    3ff4:	0f 93       	push	r16
    3ff6:	1f 93       	push	r17
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	ca 1b       	sub	r28, r26
    4002:	db 0b       	sbc	r29, r27
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	de bf       	out	0x3e, r29	; 62
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	09 94       	ijmp

00004010 <__epilogue_restores__>:
    4010:	2a 88       	ldd	r2, Y+18	; 0x12
    4012:	39 88       	ldd	r3, Y+17	; 0x11
    4014:	48 88       	ldd	r4, Y+16	; 0x10
    4016:	5f 84       	ldd	r5, Y+15	; 0x0f
    4018:	6e 84       	ldd	r6, Y+14	; 0x0e
    401a:	7d 84       	ldd	r7, Y+13	; 0x0d
    401c:	8c 84       	ldd	r8, Y+12	; 0x0c
    401e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4020:	aa 84       	ldd	r10, Y+10	; 0x0a
    4022:	b9 84       	ldd	r11, Y+9	; 0x09
    4024:	c8 84       	ldd	r12, Y+8	; 0x08
    4026:	df 80       	ldd	r13, Y+7	; 0x07
    4028:	ee 80       	ldd	r14, Y+6	; 0x06
    402a:	fd 80       	ldd	r15, Y+5	; 0x05
    402c:	0c 81       	ldd	r16, Y+4	; 0x04
    402e:	1b 81       	ldd	r17, Y+3	; 0x03
    4030:	aa 81       	ldd	r26, Y+2	; 0x02
    4032:	b9 81       	ldd	r27, Y+1	; 0x01
    4034:	ce 0f       	add	r28, r30
    4036:	d1 1d       	adc	r29, r1
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	ed 01       	movw	r28, r26
    4044:	08 95       	ret

00004046 <_exit>:
    4046:	f8 94       	cli

00004048 <__stop_program>:
    4048:	ff cf       	rjmp	.-2      	; 0x4048 <__stop_program>
